
BCM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000345c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080035e4  080035e4  000135e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003614  08003614  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003614  08003614  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003614  08003614  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003614  08003614  00013614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003618  08003618  00013618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800361c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000098  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000a4  200000a4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000866e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000175a  00000000  00000000  000286aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  00029e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000638  00000000  00000000  0002a4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ee43  00000000  00000000  0002ab30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008fc9  00000000  00000000  00049973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba95b  00000000  00000000  0005293c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010d297  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001af0  00000000  00000000  0010d2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080035cc 	.word	0x080035cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080035cc 	.word	0x080035cc

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fac4 	bl	8000758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f807 	bl	80001e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f908 	bl	80003e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001d8:	f000 f862 	bl	80002a0 <MX_ADC1_Init>
  MX_CAN_Init();
 80001dc:	f000 f8d0 	bl	8000380 <MX_CAN_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e0:	e7fe      	b.n	80001e0 <main+0x18>

080001e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e2:	b580      	push	{r7, lr}
 80001e4:	b096      	sub	sp, #88	; 0x58
 80001e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80001ec:	2228      	movs	r2, #40	; 0x28
 80001ee:	2100      	movs	r1, #0
 80001f0:	4618      	mov	r0, r3
 80001f2:	f003 f9e3 	bl	80035bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f6:	f107 031c 	add.w	r3, r7, #28
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]
 8000204:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000206:	463b      	mov	r3, r7
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]
 8000214:	615a      	str	r2, [r3, #20]
 8000216:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000218:	2301      	movs	r3, #1
 800021a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800021c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000220:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000226:	2301      	movs	r3, #1
 8000228:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022a:	2302      	movs	r3, #2
 800022c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800022e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000232:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000234:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000238:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800023e:	4618      	mov	r0, r3
 8000240:	f001 fe3e 	bl	8001ec0 <HAL_RCC_OscConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800024a:	f000 f92d 	bl	80004a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024e:	230f      	movs	r3, #15
 8000250:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000252:	2302      	movs	r3, #2
 8000254:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800025e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000264:	f107 031c 	add.w	r3, r7, #28
 8000268:	2102      	movs	r1, #2
 800026a:	4618      	mov	r0, r3
 800026c:	f002 fe66 	bl	8002f3c <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000276:	f000 f917 	bl	80004a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800027a:	2380      	movs	r3, #128	; 0x80
 800027c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800027e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000282:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000284:	463b      	mov	r3, r7
 8000286:	4618      	mov	r0, r3
 8000288:	f003 f83e 	bl	8003308 <HAL_RCCEx_PeriphCLKConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000292:	f000 f909 	bl	80004a8 <Error_Handler>
  }
}
 8000296:	bf00      	nop
 8000298:	3758      	adds	r7, #88	; 0x58
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
	...

080002a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08a      	sub	sp, #40	; 0x28
 80002a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002a6:	f107 031c 	add.w	r3, r7, #28
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
 80002c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002c2:	4b2e      	ldr	r3, [pc, #184]	; (800037c <MX_ADC1_Init+0xdc>)
 80002c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002ca:	4b2c      	ldr	r3, [pc, #176]	; (800037c <MX_ADC1_Init+0xdc>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002d0:	4b2a      	ldr	r3, [pc, #168]	; (800037c <MX_ADC1_Init+0xdc>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002d6:	4b29      	ldr	r3, [pc, #164]	; (800037c <MX_ADC1_Init+0xdc>)
 80002d8:	2200      	movs	r2, #0
 80002da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002dc:	4b27      	ldr	r3, [pc, #156]	; (800037c <MX_ADC1_Init+0xdc>)
 80002de:	2200      	movs	r2, #0
 80002e0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002e2:	4b26      	ldr	r3, [pc, #152]	; (800037c <MX_ADC1_Init+0xdc>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002ea:	4b24      	ldr	r3, [pc, #144]	; (800037c <MX_ADC1_Init+0xdc>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002f0:	4b22      	ldr	r3, [pc, #136]	; (800037c <MX_ADC1_Init+0xdc>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f6:	4b21      	ldr	r3, [pc, #132]	; (800037c <MX_ADC1_Init+0xdc>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80002fc:	4b1f      	ldr	r3, [pc, #124]	; (800037c <MX_ADC1_Init+0xdc>)
 80002fe:	2201      	movs	r2, #1
 8000300:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000302:	4b1e      	ldr	r3, [pc, #120]	; (800037c <MX_ADC1_Init+0xdc>)
 8000304:	2200      	movs	r2, #0
 8000306:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800030a:	4b1c      	ldr	r3, [pc, #112]	; (800037c <MX_ADC1_Init+0xdc>)
 800030c:	2204      	movs	r2, #4
 800030e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000310:	4b1a      	ldr	r3, [pc, #104]	; (800037c <MX_ADC1_Init+0xdc>)
 8000312:	2200      	movs	r2, #0
 8000314:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000316:	4b19      	ldr	r3, [pc, #100]	; (800037c <MX_ADC1_Init+0xdc>)
 8000318:	2200      	movs	r2, #0
 800031a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800031c:	4817      	ldr	r0, [pc, #92]	; (800037c <MX_ADC1_Init+0xdc>)
 800031e:	f000 fa81 	bl	8000824 <HAL_ADC_Init>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000328:	f000 f8be 	bl	80004a8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800032c:	2300      	movs	r3, #0
 800032e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000330:	f107 031c 	add.w	r3, r7, #28
 8000334:	4619      	mov	r1, r3
 8000336:	4811      	ldr	r0, [pc, #68]	; (800037c <MX_ADC1_Init+0xdc>)
 8000338:	f000 fec6 	bl	80010c8 <HAL_ADCEx_MultiModeConfigChannel>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000342:	f000 f8b1 	bl	80004a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000346:	2301      	movs	r3, #1
 8000348:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800034a:	2301      	movs	r3, #1
 800034c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800034e:	2300      	movs	r3, #0
 8000350:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000352:	2300      	movs	r3, #0
 8000354:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000356:	2300      	movs	r3, #0
 8000358:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800035a:	2300      	movs	r3, #0
 800035c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	4619      	mov	r1, r3
 8000362:	4806      	ldr	r0, [pc, #24]	; (800037c <MX_ADC1_Init+0xdc>)
 8000364:	f000 fbf0 	bl	8000b48 <HAL_ADC_ConfigChannel>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800036e:	f000 f89b 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000372:	bf00      	nop
 8000374:	3728      	adds	r7, #40	; 0x28
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000028 	.word	0x20000028

08000380 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000384:	4b16      	ldr	r3, [pc, #88]	; (80003e0 <MX_CAN_Init+0x60>)
 8000386:	4a17      	ldr	r2, [pc, #92]	; (80003e4 <MX_CAN_Init+0x64>)
 8000388:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800038a:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <MX_CAN_Init+0x60>)
 800038c:	2210      	movs	r2, #16
 800038e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000390:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <MX_CAN_Init+0x60>)
 8000392:	2200      	movs	r2, #0
 8000394:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000396:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <MX_CAN_Init+0x60>)
 8000398:	2200      	movs	r2, #0
 800039a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 800039c:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <MX_CAN_Init+0x60>)
 800039e:	2200      	movs	r2, #0
 80003a0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80003a2:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <MX_CAN_Init+0x60>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003a8:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <MX_CAN_Init+0x60>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003ae:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <MX_CAN_Init+0x60>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003b4:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <MX_CAN_Init+0x60>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003ba:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <MX_CAN_Init+0x60>)
 80003bc:	2200      	movs	r2, #0
 80003be:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003c0:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <MX_CAN_Init+0x60>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <MX_CAN_Init+0x60>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003cc:	4804      	ldr	r0, [pc, #16]	; (80003e0 <MX_CAN_Init+0x60>)
 80003ce:	f000 ffa7 	bl	8001320 <HAL_CAN_Init>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80003d8:	f000 f866 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	20000078 	.word	0x20000078
 80003e4:	40006400 	.word	0x40006400

080003e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	f107 030c 	add.w	r3, r7, #12
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
 80003fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003fe:	4b28      	ldr	r3, [pc, #160]	; (80004a0 <MX_GPIO_Init+0xb8>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a27      	ldr	r2, [pc, #156]	; (80004a0 <MX_GPIO_Init+0xb8>)
 8000404:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000408:	6153      	str	r3, [r2, #20]
 800040a:	4b25      	ldr	r3, [pc, #148]	; (80004a0 <MX_GPIO_Init+0xb8>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000412:	60bb      	str	r3, [r7, #8]
 8000414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000416:	4b22      	ldr	r3, [pc, #136]	; (80004a0 <MX_GPIO_Init+0xb8>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a21      	ldr	r2, [pc, #132]	; (80004a0 <MX_GPIO_Init+0xb8>)
 800041c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000420:	6153      	str	r3, [r2, #20]
 8000422:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <MX_GPIO_Init+0xb8>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800042e:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <MX_GPIO_Init+0xb8>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a1b      	ldr	r2, [pc, #108]	; (80004a0 <MX_GPIO_Init+0xb8>)
 8000434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000438:	6153      	str	r3, [r2, #20]
 800043a:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <MX_GPIO_Init+0xb8>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000442:	603b      	str	r3, [r7, #0]
 8000444:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000446:	2200      	movs	r2, #0
 8000448:	21f8      	movs	r1, #248	; 0xf8
 800044a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800044e:	f001 fd1f 	bl	8001e90 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	2103      	movs	r1, #3
 8000456:	4813      	ldr	r0, [pc, #76]	; (80004a4 <MX_GPIO_Init+0xbc>)
 8000458:	f001 fd1a 	bl	8001e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800045c:	23f8      	movs	r3, #248	; 0xf8
 800045e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000460:	2301      	movs	r3, #1
 8000462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000468:	2300      	movs	r3, #0
 800046a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046c:	f107 030c 	add.w	r3, r7, #12
 8000470:	4619      	mov	r1, r3
 8000472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000476:	f001 fb99 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800047a:	2303      	movs	r3, #3
 800047c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047e:	2301      	movs	r3, #1
 8000480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000486:	2300      	movs	r3, #0
 8000488:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800048a:	f107 030c 	add.w	r3, r7, #12
 800048e:	4619      	mov	r1, r3
 8000490:	4804      	ldr	r0, [pc, #16]	; (80004a4 <MX_GPIO_Init+0xbc>)
 8000492:	f001 fb8b 	bl	8001bac <HAL_GPIO_Init>

}
 8000496:	bf00      	nop
 8000498:	3720      	adds	r7, #32
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000
 80004a4:	48000400 	.word	0x48000400

080004a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ac:	b672      	cpsid	i
}
 80004ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <Error_Handler+0x8>
	...

080004b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ba:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <HAL_MspInit+0x44>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <HAL_MspInit+0x44>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6193      	str	r3, [r2, #24]
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <HAL_MspInit+0x44>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <HAL_MspInit+0x44>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a08      	ldr	r2, [pc, #32]	; (80004f8 <HAL_MspInit+0x44>)
 80004d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <HAL_MspInit+0x44>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000

080004fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08a      	sub	sp, #40	; 0x28
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000504:	f107 0314 	add.w	r3, r7, #20
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800051c:	d124      	bne.n	8000568 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800051e:	4b14      	ldr	r3, [pc, #80]	; (8000570 <HAL_ADC_MspInit+0x74>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a13      	ldr	r2, [pc, #76]	; (8000570 <HAL_ADC_MspInit+0x74>)
 8000524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b11      	ldr	r3, [pc, #68]	; (8000570 <HAL_ADC_MspInit+0x74>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <HAL_ADC_MspInit+0x74>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a0d      	ldr	r2, [pc, #52]	; (8000570 <HAL_ADC_MspInit+0x74>)
 800053c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000540:	6153      	str	r3, [r2, #20]
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <HAL_ADC_MspInit+0x74>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800054e:	2301      	movs	r3, #1
 8000550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000552:	2303      	movs	r3, #3
 8000554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	4619      	mov	r1, r3
 8000560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000564:	f001 fb22 	bl	8001bac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000568:	bf00      	nop
 800056a:	3728      	adds	r7, #40	; 0x28
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40021000 	.word	0x40021000

08000574 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a28      	ldr	r2, [pc, #160]	; (8000634 <HAL_CAN_MspInit+0xc0>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d149      	bne.n	800062a <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000596:	4b28      	ldr	r3, [pc, #160]	; (8000638 <HAL_CAN_MspInit+0xc4>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	4a27      	ldr	r2, [pc, #156]	; (8000638 <HAL_CAN_MspInit+0xc4>)
 800059c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005a0:	61d3      	str	r3, [r2, #28]
 80005a2:	4b25      	ldr	r3, [pc, #148]	; (8000638 <HAL_CAN_MspInit+0xc4>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b22      	ldr	r3, [pc, #136]	; (8000638 <HAL_CAN_MspInit+0xc4>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	4a21      	ldr	r2, [pc, #132]	; (8000638 <HAL_CAN_MspInit+0xc4>)
 80005b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b8:	6153      	str	r3, [r2, #20]
 80005ba:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <HAL_CAN_MspInit+0xc4>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005cc:	2302      	movs	r3, #2
 80005ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d4:	2303      	movs	r3, #3
 80005d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80005d8:	2309      	movs	r3, #9
 80005da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	4619      	mov	r1, r3
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e6:	f001 fae1 	bl	8001bac <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2100      	movs	r1, #0
 80005ee:	2013      	movs	r0, #19
 80005f0:	f001 faa5 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 80005f4:	2013      	movs	r0, #19
 80005f6:	f001 fabe 	bl	8001b76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	2014      	movs	r0, #20
 8000600:	f001 fa9d 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000604:	2014      	movs	r0, #20
 8000606:	f001 fab6 	bl	8001b76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	2015      	movs	r0, #21
 8000610:	f001 fa95 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000614:	2015      	movs	r0, #21
 8000616:	f001 faae 	bl	8001b76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	2016      	movs	r0, #22
 8000620:	f001 fa8d 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8000624:	2016      	movs	r0, #22
 8000626:	f001 faa6 	bl	8001b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800062a:	bf00      	nop
 800062c:	3728      	adds	r7, #40	; 0x28
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40006400 	.word	0x40006400
 8000638:	40021000 	.word	0x40021000

0800063c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000640:	e7fe      	b.n	8000640 <NMI_Handler+0x4>

08000642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000646:	e7fe      	b.n	8000646 <HardFault_Handler+0x4>

08000648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800064c:	e7fe      	b.n	800064c <MemManage_Handler+0x4>

0800064e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000652:	e7fe      	b.n	8000652 <BusFault_Handler+0x4>

08000654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <UsageFault_Handler+0x4>

0800065a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000688:	f000 f8ac 	bl	80007e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}

08000690 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000694:	4802      	ldr	r0, [pc, #8]	; (80006a0 <CAN_TX_IRQHandler+0x10>)
 8000696:	f000 ff3e 	bl	8001516 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000078 	.word	0x20000078

080006a4 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80006a8:	4802      	ldr	r0, [pc, #8]	; (80006b4 <CAN_RX0_IRQHandler+0x10>)
 80006aa:	f000 ff34 	bl	8001516 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000078 	.word	0x20000078

080006b8 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80006bc:	4802      	ldr	r0, [pc, #8]	; (80006c8 <CAN_RX1_IRQHandler+0x10>)
 80006be:	f000 ff2a 	bl	8001516 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000078 	.word	0x20000078

080006cc <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80006d0:	4802      	ldr	r0, [pc, #8]	; (80006dc <CAN_SCE_IRQHandler+0x10>)
 80006d2:	f000 ff20 	bl	8001516 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000078 	.word	0x20000078

080006e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <SystemInit+0x20>)
 80006e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ea:	4a05      	ldr	r2, [pc, #20]	; (8000700 <SystemInit+0x20>)
 80006ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000704:	f8df d034 	ldr.w	sp, [pc, #52]	; 800073c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000708:	f7ff ffea 	bl	80006e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <LoopForever+0x6>)
  ldr r1, =_edata
 800070e:	490d      	ldr	r1, [pc, #52]	; (8000744 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000710:	4a0d      	ldr	r2, [pc, #52]	; (8000748 <LoopForever+0xe>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000714:	e002      	b.n	800071c <LoopCopyDataInit>

08000716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071a:	3304      	adds	r3, #4

0800071c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800071c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000720:	d3f9      	bcc.n	8000716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000722:	4a0a      	ldr	r2, [pc, #40]	; (800074c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000724:	4c0a      	ldr	r4, [pc, #40]	; (8000750 <LoopForever+0x16>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000728:	e001      	b.n	800072e <LoopFillZerobss>

0800072a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800072c:	3204      	adds	r2, #4

0800072e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000730:	d3fb      	bcc.n	800072a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000732:	f002 ff1f 	bl	8003574 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000736:	f7ff fd47 	bl	80001c8 <main>

0800073a <LoopForever>:

LoopForever:
    b LoopForever
 800073a:	e7fe      	b.n	800073a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800073c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000744:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000748:	0800361c 	.word	0x0800361c
  ldr r2, =_sbss
 800074c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000750:	200000a4 	.word	0x200000a4

08000754 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000754:	e7fe      	b.n	8000754 <ADC1_2_IRQHandler>
	...

08000758 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <HAL_Init+0x28>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a07      	ldr	r2, [pc, #28]	; (8000780 <HAL_Init+0x28>)
 8000762:	f043 0310 	orr.w	r3, r3, #16
 8000766:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000768:	2003      	movs	r0, #3
 800076a:	f001 f9dd 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800076e:	200f      	movs	r0, #15
 8000770:	f000 f808 	bl	8000784 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000774:	f7ff fe9e 	bl	80004b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40022000 	.word	0x40022000

08000784 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_InitTick+0x54>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <HAL_InitTick+0x58>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	4619      	mov	r1, r3
 8000796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079a:	fbb3 f3f1 	udiv	r3, r3, r1
 800079e:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 f9f5 	bl	8001b92 <HAL_SYSTICK_Config>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
 80007b0:	e00e      	b.n	80007d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2b0f      	cmp	r3, #15
 80007b6:	d80a      	bhi.n	80007ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b8:	2200      	movs	r2, #0
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007c0:	f001 f9bd 	bl	8001b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007c4:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <HAL_InitTick+0x5c>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007ca:	2300      	movs	r3, #0
 80007cc:	e000      	b.n	80007d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000000 	.word	0x20000000
 80007dc:	20000008 	.word	0x20000008
 80007e0:	20000004 	.word	0x20000004

080007e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_IncTick+0x20>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_IncTick+0x24>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4413      	add	r3, r2
 80007f4:	4a04      	ldr	r2, [pc, #16]	; (8000808 <HAL_IncTick+0x24>)
 80007f6:	6013      	str	r3, [r2, #0]
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000008 	.word	0x20000008
 8000808:	200000a0 	.word	0x200000a0

0800080c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <HAL_GetTick+0x14>)
 8000812:	681b      	ldr	r3, [r3, #0]
}
 8000814:	4618      	mov	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	200000a0 	.word	0x200000a0

08000824 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b09a      	sub	sp, #104	; 0x68
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800082c:	2300      	movs	r3, #0
 800082e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000832:	2300      	movs	r3, #0
 8000834:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d101      	bne.n	8000844 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000840:	2301      	movs	r3, #1
 8000842:	e172      	b.n	8000b2a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	691b      	ldr	r3, [r3, #16]
 8000848:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	f003 0310 	and.w	r3, r3, #16
 8000852:	2b00      	cmp	r3, #0
 8000854:	d176      	bne.n	8000944 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	2b00      	cmp	r3, #0
 800085c:	d152      	bne.n	8000904 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2200      	movs	r2, #0
 8000862:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2200      	movs	r2, #0
 8000868:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2200      	movs	r2, #0
 800086e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2200      	movs	r2, #0
 8000874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff fe3f 	bl	80004fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000888:	2b00      	cmp	r3, #0
 800088a:	d13b      	bne.n	8000904 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f000 fce1 	bl	8001254 <ADC_Disable>
 8000892:	4603      	mov	r3, r0
 8000894:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	f003 0310 	and.w	r3, r3, #16
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d12f      	bne.n	8000904 <HAL_ADC_Init+0xe0>
 80008a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d12b      	bne.n	8000904 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80008b4:	f023 0302 	bic.w	r3, r3, #2
 80008b8:	f043 0202 	orr.w	r2, r3, #2
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80008ce:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	689a      	ldr	r2, [r3, #8]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008de:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80008e0:	4b94      	ldr	r3, [pc, #592]	; (8000b34 <HAL_ADC_Init+0x310>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a94      	ldr	r2, [pc, #592]	; (8000b38 <HAL_ADC_Init+0x314>)
 80008e6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ea:	0c9a      	lsrs	r2, r3, #18
 80008ec:	4613      	mov	r3, r2
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	4413      	add	r3, r2
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80008f6:	e002      	b.n	80008fe <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d1f9      	bne.n	80008f8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	2b00      	cmp	r3, #0
 8000910:	d007      	beq.n	8000922 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800091c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000920:	d110      	bne.n	8000944 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f023 0312 	bic.w	r3, r3, #18
 800092a:	f043 0210 	orr.w	r2, r3, #16
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	f043 0201 	orr.w	r2, r3, #1
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	f003 0310 	and.w	r3, r3, #16
 800094c:	2b00      	cmp	r3, #0
 800094e:	f040 80df 	bne.w	8000b10 <HAL_ADC_Init+0x2ec>
 8000952:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000956:	2b00      	cmp	r3, #0
 8000958:	f040 80da 	bne.w	8000b10 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000966:	2b00      	cmp	r3, #0
 8000968:	f040 80d2 	bne.w	8000b10 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000974:	f043 0202 	orr.w	r2, r3, #2
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800097c:	4b6f      	ldr	r3, [pc, #444]	; (8000b3c <HAL_ADC_Init+0x318>)
 800097e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000988:	d102      	bne.n	8000990 <HAL_ADC_Init+0x16c>
 800098a:	4b6d      	ldr	r3, [pc, #436]	; (8000b40 <HAL_ADC_Init+0x31c>)
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	e002      	b.n	8000996 <HAL_ADC_Init+0x172>
 8000990:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000994:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	f003 0303 	and.w	r3, r3, #3
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d108      	bne.n	80009b6 <HAL_ADC_Init+0x192>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d101      	bne.n	80009b6 <HAL_ADC_Init+0x192>
 80009b2:	2301      	movs	r3, #1
 80009b4:	e000      	b.n	80009b8 <HAL_ADC_Init+0x194>
 80009b6:	2300      	movs	r3, #0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d11c      	bne.n	80009f6 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80009bc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d010      	beq.n	80009e4 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	f003 0303 	and.w	r3, r3, #3
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d107      	bne.n	80009de <HAL_ADC_Init+0x1ba>
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d101      	bne.n	80009de <HAL_ADC_Init+0x1ba>
 80009da:	2301      	movs	r3, #1
 80009dc:	e000      	b.n	80009e0 <HAL_ADC_Init+0x1bc>
 80009de:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d108      	bne.n	80009f6 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80009e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	431a      	orrs	r2, r3
 80009f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009f4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	7e5b      	ldrb	r3, [r3, #25]
 80009fa:	035b      	lsls	r3, r3, #13
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000a00:	2a01      	cmp	r2, #1
 8000a02:	d002      	beq.n	8000a0a <HAL_ADC_Init+0x1e6>
 8000a04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a08:	e000      	b.n	8000a0c <HAL_ADC_Init+0x1e8>
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	431a      	orrs	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	431a      	orrs	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d11b      	bne.n	8000a62 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	7e5b      	ldrb	r3, [r3, #25]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d109      	bne.n	8000a46 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a36:	3b01      	subs	r3, #1
 8000a38:	045a      	lsls	r2, r3, #17
 8000a3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a42:	663b      	str	r3, [r7, #96]	; 0x60
 8000a44:	e00d      	b.n	8000a62 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000a4e:	f043 0220 	orr.w	r2, r3, #32
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	f043 0201 	orr.w	r2, r3, #1
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d007      	beq.n	8000a7a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a72:	4313      	orrs	r3, r2
 8000a74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a76:	4313      	orrs	r3, r2
 8000a78:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	f003 030c 	and.w	r3, r3, #12
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d114      	bne.n	8000ab2 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	6812      	ldr	r2, [r2, #0]
 8000a92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a96:	f023 0302 	bic.w	r3, r3, #2
 8000a9a:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	7e1b      	ldrb	r3, [r3, #24]
 8000aa0:	039a      	lsls	r2, r3, #14
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	68da      	ldr	r2, [r3, #12]
 8000ab8:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <HAL_ADC_Init+0x320>)
 8000aba:	4013      	ands	r3, r2
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	6812      	ldr	r2, [r2, #0]
 8000ac0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000ac2:	430b      	orrs	r3, r1
 8000ac4:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	691b      	ldr	r3, [r3, #16]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d10c      	bne.n	8000ae8 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	f023 010f 	bic.w	r1, r3, #15
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	69db      	ldr	r3, [r3, #28]
 8000adc:	1e5a      	subs	r2, r3, #1
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	631a      	str	r2, [r3, #48]	; 0x30
 8000ae6:	e007      	b.n	8000af8 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f022 020f 	bic.w	r2, r2, #15
 8000af6:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	f023 0303 	bic.w	r3, r3, #3
 8000b06:	f043 0201 	orr.w	r2, r3, #1
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	641a      	str	r2, [r3, #64]	; 0x40
 8000b0e:	e00a      	b.n	8000b26 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	f023 0312 	bic.w	r3, r3, #18
 8000b18:	f043 0210 	orr.w	r2, r3, #16
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000b20:	2301      	movs	r3, #1
 8000b22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000b26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3768      	adds	r7, #104	; 0x68
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000000 	.word	0x20000000
 8000b38:	431bde83 	.word	0x431bde83
 8000b3c:	50000300 	.word	0x50000300
 8000b40:	50000100 	.word	0x50000100
 8000b44:	fff0c007 	.word	0xfff0c007

08000b48 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b09b      	sub	sp, #108	; 0x6c
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d101      	bne.n	8000b6a <HAL_ADC_ConfigChannel+0x22>
 8000b66:	2302      	movs	r3, #2
 8000b68:	e2a4      	b.n	80010b4 <HAL_ADC_ConfigChannel+0x56c>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	f040 8288 	bne.w	8001092 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	d81c      	bhi.n	8000bc4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	4613      	mov	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	4413      	add	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	231f      	movs	r3, #31
 8000ba0:	4093      	lsls	r3, r2
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	4019      	ands	r1, r3
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	6818      	ldr	r0, [r3, #0]
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685a      	ldr	r2, [r3, #4]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	4413      	add	r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	fa00 f203 	lsl.w	r2, r0, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	631a      	str	r2, [r3, #48]	; 0x30
 8000bc2:	e063      	b.n	8000c8c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	2b09      	cmp	r3, #9
 8000bca:	d81e      	bhi.n	8000c0a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685a      	ldr	r2, [r3, #4]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	4413      	add	r3, r2
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	3b1e      	subs	r3, #30
 8000be0:	221f      	movs	r2, #31
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43db      	mvns	r3, r3
 8000be8:	4019      	ands	r1, r3
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	6818      	ldr	r0, [r3, #0]
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	4413      	add	r3, r2
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	3b1e      	subs	r3, #30
 8000bfc:	fa00 f203 	lsl.w	r2, r0, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	430a      	orrs	r2, r1
 8000c06:	635a      	str	r2, [r3, #52]	; 0x34
 8000c08:	e040      	b.n	8000c8c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2b0e      	cmp	r3, #14
 8000c10:	d81e      	bhi.n	8000c50 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	4413      	add	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	3b3c      	subs	r3, #60	; 0x3c
 8000c26:	221f      	movs	r2, #31
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	4019      	ands	r1, r3
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	6818      	ldr	r0, [r3, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685a      	ldr	r2, [r3, #4]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4413      	add	r3, r2
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	3b3c      	subs	r3, #60	; 0x3c
 8000c42:	fa00 f203 	lsl.w	r2, r0, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	639a      	str	r2, [r3, #56]	; 0x38
 8000c4e:	e01d      	b.n	8000c8c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685a      	ldr	r2, [r3, #4]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	4413      	add	r3, r2
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	3b5a      	subs	r3, #90	; 0x5a
 8000c64:	221f      	movs	r2, #31
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	4019      	ands	r1, r3
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	6818      	ldr	r0, [r3, #0]
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685a      	ldr	r2, [r3, #4]
 8000c76:	4613      	mov	r3, r2
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	4413      	add	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	3b5a      	subs	r3, #90	; 0x5a
 8000c80:	fa00 f203 	lsl.w	r2, r0, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	f003 030c 	and.w	r3, r3, #12
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 80e5 	bne.w	8000e66 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b09      	cmp	r3, #9
 8000ca2:	d91c      	bls.n	8000cde <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	6999      	ldr	r1, [r3, #24]
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	4413      	add	r3, r2
 8000cb4:	3b1e      	subs	r3, #30
 8000cb6:	2207      	movs	r2, #7
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	4019      	ands	r1, r3
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	6898      	ldr	r0, [r3, #8]
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	4413      	add	r3, r2
 8000cce:	3b1e      	subs	r3, #30
 8000cd0:	fa00 f203 	lsl.w	r2, r0, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	619a      	str	r2, [r3, #24]
 8000cdc:	e019      	b.n	8000d12 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	6959      	ldr	r1, [r3, #20]
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	4413      	add	r3, r2
 8000cee:	2207      	movs	r2, #7
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	4019      	ands	r1, r3
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	6898      	ldr	r0, [r3, #8]
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4613      	mov	r3, r2
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	4413      	add	r3, r2
 8000d06:	fa00 f203 	lsl.w	r2, r0, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	695a      	ldr	r2, [r3, #20]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	08db      	lsrs	r3, r3, #3
 8000d1e:	f003 0303 	and.w	r3, r3, #3
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	691b      	ldr	r3, [r3, #16]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	2b03      	cmp	r3, #3
 8000d32:	d84f      	bhi.n	8000dd4 <HAL_ADC_ConfigChannel+0x28c>
 8000d34:	a201      	add	r2, pc, #4	; (adr r2, 8000d3c <HAL_ADC_ConfigChannel+0x1f4>)
 8000d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3a:	bf00      	nop
 8000d3c:	08000d4d 	.word	0x08000d4d
 8000d40:	08000d6f 	.word	0x08000d6f
 8000d44:	08000d91 	.word	0x08000d91
 8000d48:	08000db3 	.word	0x08000db3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d52:	4b94      	ldr	r3, [pc, #592]	; (8000fa4 <HAL_ADC_ConfigChannel+0x45c>)
 8000d54:	4013      	ands	r3, r2
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	6812      	ldr	r2, [r2, #0]
 8000d5a:	0691      	lsls	r1, r2, #26
 8000d5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	431a      	orrs	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000d6a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000d6c:	e07e      	b.n	8000e6c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000d74:	4b8b      	ldr	r3, [pc, #556]	; (8000fa4 <HAL_ADC_ConfigChannel+0x45c>)
 8000d76:	4013      	ands	r3, r2
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	6812      	ldr	r2, [r2, #0]
 8000d7c:	0691      	lsls	r1, r2, #26
 8000d7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d80:	430a      	orrs	r2, r1
 8000d82:	431a      	orrs	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000d8c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000d8e:	e06d      	b.n	8000e6c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000d96:	4b83      	ldr	r3, [pc, #524]	; (8000fa4 <HAL_ADC_ConfigChannel+0x45c>)
 8000d98:	4013      	ands	r3, r2
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	6812      	ldr	r2, [r2, #0]
 8000d9e:	0691      	lsls	r1, r2, #26
 8000da0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000da2:	430a      	orrs	r2, r1
 8000da4:	431a      	orrs	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000dae:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000db0:	e05c      	b.n	8000e6c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000db8:	4b7a      	ldr	r3, [pc, #488]	; (8000fa4 <HAL_ADC_ConfigChannel+0x45c>)
 8000dba:	4013      	ands	r3, r2
 8000dbc:	683a      	ldr	r2, [r7, #0]
 8000dbe:	6812      	ldr	r2, [r2, #0]
 8000dc0:	0691      	lsls	r1, r2, #26
 8000dc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000dd0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000dd2:	e04b      	b.n	8000e6c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	069b      	lsls	r3, r3, #26
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d107      	bne.n	8000df8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000df6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000dfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	069b      	lsls	r3, r3, #26
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d107      	bne.n	8000e1c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000e1a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000e22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	069b      	lsls	r3, r3, #26
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d107      	bne.n	8000e40 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000e3e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000e46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	069b      	lsls	r3, r3, #26
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d10a      	bne.n	8000e6a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000e62:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8000e64:	e001      	b.n	8000e6a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8000e66:	bf00      	nop
 8000e68:	e000      	b.n	8000e6c <HAL_ADC_ConfigChannel+0x324>
      break;
 8000e6a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d108      	bne.n	8000e8c <HAL_ADC_ConfigChannel+0x344>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d101      	bne.n	8000e8c <HAL_ADC_ConfigChannel+0x344>
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e000      	b.n	8000e8e <HAL_ADC_ConfigChannel+0x346>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f040 810a 	bne.w	80010a8 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d00f      	beq.n	8000ebc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000eba:	e049      	b.n	8000f50 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2201      	movs	r2, #1
 8000eca:	409a      	lsls	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b09      	cmp	r3, #9
 8000edc:	d91c      	bls.n	8000f18 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6999      	ldr	r1, [r3, #24]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	4413      	add	r3, r2
 8000eee:	3b1b      	subs	r3, #27
 8000ef0:	2207      	movs	r2, #7
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	4019      	ands	r1, r3
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	6898      	ldr	r0, [r3, #8]
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	3b1b      	subs	r3, #27
 8000f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	430a      	orrs	r2, r1
 8000f14:	619a      	str	r2, [r3, #24]
 8000f16:	e01b      	b.n	8000f50 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6959      	ldr	r1, [r3, #20]
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	4613      	mov	r3, r2
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	4413      	add	r3, r2
 8000f2a:	2207      	movs	r2, #7
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	4019      	ands	r1, r3
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	6898      	ldr	r0, [r3, #8]
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	1c5a      	adds	r2, r3, #1
 8000f3e:	4613      	mov	r3, r2
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	4413      	add	r3, r2
 8000f44:	fa00 f203 	lsl.w	r2, r0, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_ADC_ConfigChannel+0x460>)
 8000f52:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b10      	cmp	r3, #16
 8000f5a:	d105      	bne.n	8000f68 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d015      	beq.n	8000f94 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000f6c:	2b11      	cmp	r3, #17
 8000f6e:	d105      	bne.n	8000f7c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000f70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00b      	beq.n	8000f94 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000f80:	2b12      	cmp	r3, #18
 8000f82:	f040 8091 	bne.w	80010a8 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000f86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f040 808a 	bne.w	80010a8 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f9c:	d108      	bne.n	8000fb0 <HAL_ADC_ConfigChannel+0x468>
 8000f9e:	4b03      	ldr	r3, [pc, #12]	; (8000fac <HAL_ADC_ConfigChannel+0x464>)
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	e008      	b.n	8000fb6 <HAL_ADC_ConfigChannel+0x46e>
 8000fa4:	83fff000 	.word	0x83fff000
 8000fa8:	50000300 	.word	0x50000300
 8000fac:	50000100 	.word	0x50000100
 8000fb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000fb4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d108      	bne.n	8000fd6 <HAL_ADC_ConfigChannel+0x48e>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d101      	bne.n	8000fd6 <HAL_ADC_ConfigChannel+0x48e>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <HAL_ADC_ConfigChannel+0x490>
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d150      	bne.n	800107e <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000fdc:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d010      	beq.n	8001004 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d107      	bne.n	8000ffe <HAL_ADC_ConfigChannel+0x4b6>
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d101      	bne.n	8000ffe <HAL_ADC_ConfigChannel+0x4b6>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <HAL_ADC_ConfigChannel+0x4b8>
 8000ffe:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001000:	2b00      	cmp	r3, #0
 8001002:	d13c      	bne.n	800107e <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b10      	cmp	r3, #16
 800100a:	d11d      	bne.n	8001048 <HAL_ADC_ConfigChannel+0x500>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001014:	d118      	bne.n	8001048 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800101e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001020:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001022:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <HAL_ADC_ConfigChannel+0x578>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <HAL_ADC_ConfigChannel+0x57c>)
 8001028:	fba2 2303 	umull	r2, r3, r2, r3
 800102c:	0c9a      	lsrs	r2, r3, #18
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001038:	e002      	b.n	8001040 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	3b01      	subs	r3, #1
 800103e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f9      	bne.n	800103a <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001046:	e02e      	b.n	80010a6 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b11      	cmp	r3, #17
 800104e:	d10b      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x520>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001058:	d106      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800105a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001064:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001066:	e01e      	b.n	80010a6 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b12      	cmp	r3, #18
 800106e:	d11a      	bne.n	80010a6 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800107a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800107c:	e013      	b.n	80010a6 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f043 0220 	orr.w	r2, r3, #32
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001090:	e00a      	b.n	80010a8 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f043 0220 	orr.w	r2, r3, #32
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80010a4:	e000      	b.n	80010a8 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80010a6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80010b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	376c      	adds	r7, #108	; 0x6c
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	20000000 	.word	0x20000000
 80010c4:	431bde83 	.word	0x431bde83

080010c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b099      	sub	sp, #100	; 0x64
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010e0:	d102      	bne.n	80010e8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80010e2:	4b5a      	ldr	r3, [pc, #360]	; (800124c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	e002      	b.n	80010ee <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80010e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010ec:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d101      	bne.n	80010f8 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e0a2      	b.n	800123e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d101      	bne.n	8001106 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001102:	2302      	movs	r3, #2
 8001104:	e09b      	b.n	800123e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2201      	movs	r2, #1
 800110a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	2b00      	cmp	r3, #0
 800111a:	d17f      	bne.n	800121c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	d179      	bne.n	800121c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001128:	4b49      	ldr	r3, [pc, #292]	; (8001250 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800112a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d040      	beq.n	80011b6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001134:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	6859      	ldr	r1, [r3, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001146:	035b      	lsls	r3, r3, #13
 8001148:	430b      	orrs	r3, r1
 800114a:	431a      	orrs	r2, r3
 800114c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800114e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	2b01      	cmp	r3, #1
 800115c:	d108      	bne.n	8001170 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b01      	cmp	r3, #1
 800116a:	d101      	bne.n	8001170 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001170:	2300      	movs	r3, #0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d15c      	bne.n	8001230 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	2b01      	cmp	r3, #1
 8001180:	d107      	bne.n	8001192 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b01      	cmp	r3, #1
 800118c:	d101      	bne.n	8001192 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001192:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001194:	2b00      	cmp	r3, #0
 8001196:	d14b      	bne.n	8001230 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001198:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80011a0:	f023 030f 	bic.w	r3, r3, #15
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	6811      	ldr	r1, [r2, #0]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	6892      	ldr	r2, [r2, #8]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	431a      	orrs	r2, r3
 80011b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011b2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80011b4:	e03c      	b.n	8001230 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80011b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011c0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d108      	bne.n	80011e2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d101      	bne.n	80011e2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80011e2:	2300      	movs	r3, #0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d123      	bne.n	8001230 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d107      	bne.n	8001204 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d101      	bne.n	8001204 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001200:	2301      	movs	r3, #1
 8001202:	e000      	b.n	8001206 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001204:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001206:	2b00      	cmp	r3, #0
 8001208:	d112      	bne.n	8001230 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800120a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001212:	f023 030f 	bic.w	r3, r3, #15
 8001216:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001218:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800121a:	e009      	b.n	8001230 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	f043 0220 	orr.w	r2, r3, #32
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800122e:	e000      	b.n	8001232 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001230:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800123a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800123e:	4618      	mov	r0, r3
 8001240:	3764      	adds	r7, #100	; 0x64
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	50000100 	.word	0x50000100
 8001250:	50000300 	.word	0x50000300

08001254 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	2b01      	cmp	r3, #1
 800126c:	d108      	bne.n	8001280 <ADC_Disable+0x2c>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b01      	cmp	r3, #1
 800127a:	d101      	bne.n	8001280 <ADC_Disable+0x2c>
 800127c:	2301      	movs	r3, #1
 800127e:	e000      	b.n	8001282 <ADC_Disable+0x2e>
 8001280:	2300      	movs	r3, #0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d047      	beq.n	8001316 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 030d 	and.w	r3, r3, #13
 8001290:	2b01      	cmp	r3, #1
 8001292:	d10f      	bne.n	80012b4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 0202 	orr.w	r2, r2, #2
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2203      	movs	r2, #3
 80012aa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80012ac:	f7ff faae 	bl	800080c <HAL_GetTick>
 80012b0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80012b2:	e029      	b.n	8001308 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f043 0210 	orr.w	r2, r3, #16
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c4:	f043 0201 	orr.w	r2, r3, #1
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e023      	b.n	8001318 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012d0:	f7ff fa9c 	bl	800080c <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d914      	bls.n	8001308 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d10d      	bne.n	8001308 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	f043 0210 	orr.w	r2, r3, #16
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fc:	f043 0201 	orr.w	r2, r3, #1
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e007      	b.n	8001318 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b01      	cmp	r3, #1
 8001314:	d0dc      	beq.n	80012d0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e0ed      	b.n	800150e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d102      	bne.n	8001344 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff f918 	bl	8000574 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0201 	orr.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001354:	f7ff fa5a 	bl	800080c <HAL_GetTick>
 8001358:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800135a:	e012      	b.n	8001382 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800135c:	f7ff fa56 	bl	800080c <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b0a      	cmp	r3, #10
 8001368:	d90b      	bls.n	8001382 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2205      	movs	r2, #5
 800137a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e0c5      	b.n	800150e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0e5      	beq.n	800135c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0202 	bic.w	r2, r2, #2
 800139e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013a0:	f7ff fa34 	bl	800080c <HAL_GetTick>
 80013a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013a6:	e012      	b.n	80013ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013a8:	f7ff fa30 	bl	800080c <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b0a      	cmp	r3, #10
 80013b4:	d90b      	bls.n	80013ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2205      	movs	r2, #5
 80013c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e09f      	b.n	800150e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1e5      	bne.n	80013a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7e1b      	ldrb	r3, [r3, #24]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d108      	bne.n	80013f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	e007      	b.n	8001406 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001404:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	7e5b      	ldrb	r3, [r3, #25]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d108      	bne.n	8001420 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e007      	b.n	8001430 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800142e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	7e9b      	ldrb	r3, [r3, #26]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d108      	bne.n	800144a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f042 0220 	orr.w	r2, r2, #32
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	e007      	b.n	800145a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0220 	bic.w	r2, r2, #32
 8001458:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	7edb      	ldrb	r3, [r3, #27]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d108      	bne.n	8001474 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 0210 	bic.w	r2, r2, #16
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	e007      	b.n	8001484 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0210 	orr.w	r2, r2, #16
 8001482:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7f1b      	ldrb	r3, [r3, #28]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d108      	bne.n	800149e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 0208 	orr.w	r2, r2, #8
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	e007      	b.n	80014ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0208 	bic.w	r2, r2, #8
 80014ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	7f5b      	ldrb	r3, [r3, #29]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d108      	bne.n	80014c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f042 0204 	orr.w	r2, r2, #4
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	e007      	b.n	80014d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0204 	bic.w	r2, r2, #4
 80014d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	431a      	orrs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	ea42 0103 	orr.w	r1, r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	1e5a      	subs	r2, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b08a      	sub	sp, #40	; 0x28
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001552:	6a3b      	ldr	r3, [r7, #32]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	d07c      	beq.n	8001656 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d023      	beq.n	80015ae <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2201      	movs	r2, #1
 800156c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 f983 	bl	8001884 <HAL_CAN_TxMailbox0CompleteCallback>
 800157e:	e016      	b.n	80015ae <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	2b00      	cmp	r3, #0
 8001588:	d004      	beq.n	8001594 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
 8001592:	e00c      	b.n	80015ae <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	d004      	beq.n	80015a8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
 80015a6:	e002      	b.n	80015ae <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 f989 	bl	80018c0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d024      	beq.n	8001602 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 f963 	bl	8001898 <HAL_CAN_TxMailbox1CompleteCallback>
 80015d2:	e016      	b.n	8001602 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d004      	beq.n	80015e8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
 80015e6:	e00c      	b.n	8001602 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d004      	beq.n	80015fc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
 80015fa:	e002      	b.n	8001602 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f969 	bl	80018d4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d024      	beq.n	8001656 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001614:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f943 	bl	80018ac <HAL_CAN_TxMailbox2CompleteCallback>
 8001626:	e016      	b.n	8001656 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d004      	beq.n	800163c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
 800163a:	e00c      	b.n	8001656 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d004      	beq.n	8001650 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
 800164e:	e002      	b.n	8001656 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 f949 	bl	80018e8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00c      	beq.n	800167a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	2b00      	cmp	r3, #0
 8001668:	d007      	beq.n	800167a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001670:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2210      	movs	r2, #16
 8001678:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00b      	beq.n	800169c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b00      	cmp	r3, #0
 800168c:	d006      	beq.n	800169c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2208      	movs	r2, #8
 8001694:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f93a 	bl	8001910 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d009      	beq.n	80016ba <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d002      	beq.n	80016ba <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 f921 	bl	80018fc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80016ba:	6a3b      	ldr	r3, [r7, #32]
 80016bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00c      	beq.n	80016de <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	f003 0310 	and.w	r3, r3, #16
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d007      	beq.n	80016de <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2210      	movs	r2, #16
 80016dc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80016de:	6a3b      	ldr	r3, [r7, #32]
 80016e0:	f003 0320 	and.w	r3, r3, #32
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00b      	beq.n	8001700 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d006      	beq.n	8001700 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2208      	movs	r2, #8
 80016f8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f91c 	bl	8001938 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001700:	6a3b      	ldr	r3, [r7, #32]
 8001702:	f003 0310 	and.w	r3, r3, #16
 8001706:	2b00      	cmp	r3, #0
 8001708:	d009      	beq.n	800171e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2b00      	cmp	r3, #0
 8001716:	d002      	beq.n	800171e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f903 	bl	8001924 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d00b      	beq.n	8001740 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f003 0310 	and.w	r3, r3, #16
 800172e:	2b00      	cmp	r3, #0
 8001730:	d006      	beq.n	8001740 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2210      	movs	r2, #16
 8001738:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f906 	bl	800194c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00b      	beq.n	8001762 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2208      	movs	r2, #8
 800175a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f8ff 	bl	8001960 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d07b      	beq.n	8001864 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	2b00      	cmp	r3, #0
 8001774:	d072      	beq.n	800185c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177c:	2b00      	cmp	r3, #0
 800177e:	d008      	beq.n	8001792 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001798:	2b00      	cmp	r3, #0
 800179a:	d008      	beq.n	80017ae <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	f043 0302 	orr.w	r3, r3, #2
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d043      	beq.n	800185c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d03e      	beq.n	800185c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017e4:	2b60      	cmp	r3, #96	; 0x60
 80017e6:	d02b      	beq.n	8001840 <HAL_CAN_IRQHandler+0x32a>
 80017e8:	2b60      	cmp	r3, #96	; 0x60
 80017ea:	d82e      	bhi.n	800184a <HAL_CAN_IRQHandler+0x334>
 80017ec:	2b50      	cmp	r3, #80	; 0x50
 80017ee:	d022      	beq.n	8001836 <HAL_CAN_IRQHandler+0x320>
 80017f0:	2b50      	cmp	r3, #80	; 0x50
 80017f2:	d82a      	bhi.n	800184a <HAL_CAN_IRQHandler+0x334>
 80017f4:	2b40      	cmp	r3, #64	; 0x40
 80017f6:	d019      	beq.n	800182c <HAL_CAN_IRQHandler+0x316>
 80017f8:	2b40      	cmp	r3, #64	; 0x40
 80017fa:	d826      	bhi.n	800184a <HAL_CAN_IRQHandler+0x334>
 80017fc:	2b30      	cmp	r3, #48	; 0x30
 80017fe:	d010      	beq.n	8001822 <HAL_CAN_IRQHandler+0x30c>
 8001800:	2b30      	cmp	r3, #48	; 0x30
 8001802:	d822      	bhi.n	800184a <HAL_CAN_IRQHandler+0x334>
 8001804:	2b10      	cmp	r3, #16
 8001806:	d002      	beq.n	800180e <HAL_CAN_IRQHandler+0x2f8>
 8001808:	2b20      	cmp	r3, #32
 800180a:	d005      	beq.n	8001818 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800180c:	e01d      	b.n	800184a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	f043 0308 	orr.w	r3, r3, #8
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001816:	e019      	b.n	800184c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	f043 0310 	orr.w	r3, r3, #16
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001820:	e014      	b.n	800184c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	f043 0320 	orr.w	r3, r3, #32
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800182a:	e00f      	b.n	800184c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001834:	e00a      	b.n	800184c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800183e:	e005      	b.n	800184c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001848:	e000      	b.n	800184c <HAL_CAN_IRQHandler+0x336>
            break;
 800184a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	699a      	ldr	r2, [r3, #24]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800185a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2204      	movs	r2, #4
 8001862:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	2b00      	cmp	r3, #0
 8001868:	d008      	beq.n	800187c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	431a      	orrs	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f87c 	bl	8001974 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800187c:	bf00      	nop
 800187e:	3728      	adds	r7, #40	; 0x28
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4907      	ldr	r1, [pc, #28]	; (8001a24 <__NVIC_EnableIRQ+0x38>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db0a      	blt.n	8001a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	490c      	ldr	r1, [pc, #48]	; (8001a74 <__NVIC_SetPriority+0x4c>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a50:	e00a      	b.n	8001a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4908      	ldr	r1, [pc, #32]	; (8001a78 <__NVIC_SetPriority+0x50>)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	3b04      	subs	r3, #4
 8001a60:	0112      	lsls	r2, r2, #4
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	440b      	add	r3, r1
 8001a66:	761a      	strb	r2, [r3, #24]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000e100 	.word	0xe000e100
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	; 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f1c3 0307 	rsb	r3, r3, #7
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	bf28      	it	cs
 8001a9a:	2304      	movcs	r3, #4
 8001a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d902      	bls.n	8001aac <NVIC_EncodePriority+0x30>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b03      	subs	r3, #3
 8001aaa:	e000      	b.n	8001aae <NVIC_EncodePriority+0x32>
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	401a      	ands	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43d9      	mvns	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	4313      	orrs	r3, r2
         );
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3724      	adds	r7, #36	; 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af4:	d301      	bcc.n	8001afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00f      	b.n	8001b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <SysTick_Config+0x40>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b02:	210f      	movs	r1, #15
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b08:	f7ff ff8e 	bl	8001a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <SysTick_Config+0x40>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b12:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <SysTick_Config+0x40>)
 8001b14:	2207      	movs	r2, #7
 8001b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	e000e010 	.word	0xe000e010

08001b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff29 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b50:	f7ff ff3e 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	6978      	ldr	r0, [r7, #20]
 8001b5c:	f7ff ff8e 	bl	8001a7c <NVIC_EncodePriority>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff5d 	bl	8001a28 <__NVIC_SetPriority>
}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff31 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffa2 	bl	8001ae4 <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bba:	e14e      	b.n	8001e5a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8140 	beq.w	8001e54 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d005      	beq.n	8001bec <HAL_GPIO_Init+0x40>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d130      	bne.n	8001c4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c22:	2201      	movs	r2, #1
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	091b      	lsrs	r3, r3, #4
 8001c38:	f003 0201 	and.w	r2, r3, #1
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d017      	beq.n	8001c8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d123      	bne.n	8001cde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	08da      	lsrs	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3208      	adds	r2, #8
 8001c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	220f      	movs	r2, #15
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	08da      	lsrs	r2, r3, #3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3208      	adds	r2, #8
 8001cd8:	6939      	ldr	r1, [r7, #16]
 8001cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 0203 	and.w	r2, r3, #3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 809a 	beq.w	8001e54 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d20:	4b55      	ldr	r3, [pc, #340]	; (8001e78 <HAL_GPIO_Init+0x2cc>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	4a54      	ldr	r2, [pc, #336]	; (8001e78 <HAL_GPIO_Init+0x2cc>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6193      	str	r3, [r2, #24]
 8001d2c:	4b52      	ldr	r3, [pc, #328]	; (8001e78 <HAL_GPIO_Init+0x2cc>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d38:	4a50      	ldr	r2, [pc, #320]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	3302      	adds	r3, #2
 8001d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	220f      	movs	r2, #15
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d62:	d013      	beq.n	8001d8c <HAL_GPIO_Init+0x1e0>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a46      	ldr	r2, [pc, #280]	; (8001e80 <HAL_GPIO_Init+0x2d4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d00d      	beq.n	8001d88 <HAL_GPIO_Init+0x1dc>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a45      	ldr	r2, [pc, #276]	; (8001e84 <HAL_GPIO_Init+0x2d8>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d007      	beq.n	8001d84 <HAL_GPIO_Init+0x1d8>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a44      	ldr	r2, [pc, #272]	; (8001e88 <HAL_GPIO_Init+0x2dc>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d101      	bne.n	8001d80 <HAL_GPIO_Init+0x1d4>
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e006      	b.n	8001d8e <HAL_GPIO_Init+0x1e2>
 8001d80:	2305      	movs	r3, #5
 8001d82:	e004      	b.n	8001d8e <HAL_GPIO_Init+0x1e2>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e002      	b.n	8001d8e <HAL_GPIO_Init+0x1e2>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <HAL_GPIO_Init+0x1e2>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	f002 0203 	and.w	r2, r2, #3
 8001d94:	0092      	lsls	r2, r2, #2
 8001d96:	4093      	lsls	r3, r2
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d9e:	4937      	ldr	r1, [pc, #220]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	089b      	lsrs	r3, r3, #2
 8001da4:	3302      	adds	r3, #2
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dac:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dd0:	4a2e      	ldr	r2, [pc, #184]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dd6:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4013      	ands	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dfa:	4a24      	ldr	r2, [pc, #144]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e00:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e24:	4a19      	ldr	r2, [pc, #100]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e2a:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e4e:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	3301      	adds	r3, #1
 8001e58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f47f aea9 	bne.w	8001bbc <HAL_GPIO_Init+0x10>
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	bf00      	nop
 8001e6e:	371c      	adds	r7, #28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40010000 	.word	0x40010000
 8001e80:	48000400 	.word	0x48000400
 8001e84:	48000800 	.word	0x48000800
 8001e88:	48000c00 	.word	0x48000c00
 8001e8c:	40010400 	.word	0x40010400

08001e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	807b      	strh	r3, [r7, #2]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea0:	787b      	ldrb	r3, [r7, #1]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001eac:	e002      	b.n	8001eb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ecc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ed0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d102      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f001 b823 	b.w	8002f2c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 817d 	beq.w	80021f6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001efc:	4bbc      	ldr	r3, [pc, #752]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d00c      	beq.n	8001f22 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f08:	4bb9      	ldr	r3, [pc, #740]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d15c      	bne.n	8001fce <HAL_RCC_OscConfig+0x10e>
 8001f14:	4bb6      	ldr	r3, [pc, #728]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f20:	d155      	bne.n	8001fce <HAL_RCC_OscConfig+0x10e>
 8001f22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f26:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f36:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3a:	fab3 f383 	clz	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	095b      	lsrs	r3, r3, #5
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d102      	bne.n	8001f54 <HAL_RCC_OscConfig+0x94>
 8001f4e:	4ba8      	ldr	r3, [pc, #672]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	e015      	b.n	8001f80 <HAL_RCC_OscConfig+0xc0>
 8001f54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f58:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001f68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f6c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001f70:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001f74:	fa93 f3a3 	rbit	r3, r3
 8001f78:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001f7c:	4b9c      	ldr	r3, [pc, #624]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f84:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001f88:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001f8c:	fa92 f2a2 	rbit	r2, r2
 8001f90:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001f94:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001f98:	fab2 f282 	clz	r2, r2
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	f042 0220 	orr.w	r2, r2, #32
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	f002 021f 	and.w	r2, r2, #31
 8001fa8:	2101      	movs	r1, #1
 8001faa:	fa01 f202 	lsl.w	r2, r1, r2
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 811f 	beq.w	80021f4 <HAL_RCC_OscConfig+0x334>
 8001fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f040 8116 	bne.w	80021f4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	f000 bfaf 	b.w	8002f2c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fde:	d106      	bne.n	8001fee <HAL_RCC_OscConfig+0x12e>
 8001fe0:	4b83      	ldr	r3, [pc, #524]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a82      	ldr	r2, [pc, #520]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8001fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	e036      	b.n	800205c <HAL_RCC_OscConfig+0x19c>
 8001fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10c      	bne.n	8002018 <HAL_RCC_OscConfig+0x158>
 8001ffe:	4b7c      	ldr	r3, [pc, #496]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a7b      	ldr	r2, [pc, #492]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8002004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	4b79      	ldr	r3, [pc, #484]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a78      	ldr	r2, [pc, #480]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8002010:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	e021      	b.n	800205c <HAL_RCC_OscConfig+0x19c>
 8002018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002028:	d10c      	bne.n	8002044 <HAL_RCC_OscConfig+0x184>
 800202a:	4b71      	ldr	r3, [pc, #452]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a70      	ldr	r2, [pc, #448]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8002030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	4b6e      	ldr	r3, [pc, #440]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a6d      	ldr	r2, [pc, #436]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 800203c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	e00b      	b.n	800205c <HAL_RCC_OscConfig+0x19c>
 8002044:	4b6a      	ldr	r3, [pc, #424]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a69      	ldr	r2, [pc, #420]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 800204a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4b67      	ldr	r3, [pc, #412]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a66      	ldr	r2, [pc, #408]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8002056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800205a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800205c:	4b64      	ldr	r3, [pc, #400]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	f023 020f 	bic.w	r2, r3, #15
 8002064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002068:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	495f      	ldr	r1, [pc, #380]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8002072:	4313      	orrs	r3, r2
 8002074:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d059      	beq.n	800213a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002086:	f7fe fbc1 	bl	800080c <HAL_GetTick>
 800208a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002090:	f7fe fbbc 	bl	800080c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b64      	cmp	r3, #100	; 0x64
 800209e:	d902      	bls.n	80020a6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	f000 bf43 	b.w	8002f2c <HAL_RCC_OscConfig+0x106c>
 80020a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020aa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80020ba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	fab3 f383 	clz	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	095b      	lsrs	r3, r3, #5
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d102      	bne.n	80020d8 <HAL_RCC_OscConfig+0x218>
 80020d2:	4b47      	ldr	r3, [pc, #284]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	e015      	b.n	8002104 <HAL_RCC_OscConfig+0x244>
 80020d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020dc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80020e4:	fa93 f3a3 	rbit	r3, r3
 80020e8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80020ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020f0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80020f4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002100:	4b3b      	ldr	r3, [pc, #236]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002108:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800210c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002110:	fa92 f2a2 	rbit	r2, r2
 8002114:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002118:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800211c:	fab2 f282 	clz	r2, r2
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	f042 0220 	orr.w	r2, r2, #32
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	f002 021f 	and.w	r2, r2, #31
 800212c:	2101      	movs	r1, #1
 800212e:	fa01 f202 	lsl.w	r2, r1, r2
 8002132:	4013      	ands	r3, r2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0ab      	beq.n	8002090 <HAL_RCC_OscConfig+0x1d0>
 8002138:	e05d      	b.n	80021f6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213a:	f7fe fb67 	bl	800080c <HAL_GetTick>
 800213e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002142:	e00a      	b.n	800215a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002144:	f7fe fb62 	bl	800080c <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b64      	cmp	r3, #100	; 0x64
 8002152:	d902      	bls.n	800215a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	f000 bee9 	b.w	8002f2c <HAL_RCC_OscConfig+0x106c>
 800215a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800215e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800216e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002172:	fab3 f383 	clz	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	095b      	lsrs	r3, r3, #5
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b01      	cmp	r3, #1
 8002184:	d102      	bne.n	800218c <HAL_RCC_OscConfig+0x2cc>
 8002186:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	e015      	b.n	80021b8 <HAL_RCC_OscConfig+0x2f8>
 800218c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002190:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002194:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002198:	fa93 f3a3 	rbit	r3, r3
 800219c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80021a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021a4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80021a8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80021ac:	fa93 f3a3 	rbit	r3, r3
 80021b0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80021b4:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021bc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80021c0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80021c4:	fa92 f2a2 	rbit	r2, r2
 80021c8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80021cc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80021d0:	fab2 f282 	clz	r2, r2
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	f042 0220 	orr.w	r2, r2, #32
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	f002 021f 	and.w	r2, r2, #31
 80021e0:	2101      	movs	r1, #1
 80021e2:	fa01 f202 	lsl.w	r2, r1, r2
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1ab      	bne.n	8002144 <HAL_RCC_OscConfig+0x284>
 80021ec:	e003      	b.n	80021f6 <HAL_RCC_OscConfig+0x336>
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 817d 	beq.w	8002506 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800220c:	4ba6      	ldr	r3, [pc, #664]	; (80024a8 <HAL_RCC_OscConfig+0x5e8>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00b      	beq.n	8002230 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002218:	4ba3      	ldr	r3, [pc, #652]	; (80024a8 <HAL_RCC_OscConfig+0x5e8>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	2b08      	cmp	r3, #8
 8002222:	d172      	bne.n	800230a <HAL_RCC_OscConfig+0x44a>
 8002224:	4ba0      	ldr	r3, [pc, #640]	; (80024a8 <HAL_RCC_OscConfig+0x5e8>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d16c      	bne.n	800230a <HAL_RCC_OscConfig+0x44a>
 8002230:	2302      	movs	r3, #2
 8002232:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002242:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002246:	fab3 f383 	clz	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	095b      	lsrs	r3, r3, #5
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d102      	bne.n	8002260 <HAL_RCC_OscConfig+0x3a0>
 800225a:	4b93      	ldr	r3, [pc, #588]	; (80024a8 <HAL_RCC_OscConfig+0x5e8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	e013      	b.n	8002288 <HAL_RCC_OscConfig+0x3c8>
 8002260:	2302      	movs	r3, #2
 8002262:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002272:	2302      	movs	r3, #2
 8002274:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002278:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800227c:	fa93 f3a3 	rbit	r3, r3
 8002280:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002284:	4b88      	ldr	r3, [pc, #544]	; (80024a8 <HAL_RCC_OscConfig+0x5e8>)
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	2202      	movs	r2, #2
 800228a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800228e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002292:	fa92 f2a2 	rbit	r2, r2
 8002296:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800229a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800229e:	fab2 f282 	clz	r2, r2
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	f042 0220 	orr.w	r2, r2, #32
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	f002 021f 	and.w	r2, r2, #31
 80022ae:	2101      	movs	r1, #1
 80022b0:	fa01 f202 	lsl.w	r2, r1, r2
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCC_OscConfig+0x410>
 80022ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d002      	beq.n	80022d0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	f000 be2e 	b.w	8002f2c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d0:	4b75      	ldr	r3, [pc, #468]	; (80024a8 <HAL_RCC_OscConfig+0x5e8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	21f8      	movs	r1, #248	; 0xf8
 80022e6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80022ee:	fa91 f1a1 	rbit	r1, r1
 80022f2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80022f6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80022fa:	fab1 f181 	clz	r1, r1
 80022fe:	b2c9      	uxtb	r1, r1
 8002300:	408b      	lsls	r3, r1
 8002302:	4969      	ldr	r1, [pc, #420]	; (80024a8 <HAL_RCC_OscConfig+0x5e8>)
 8002304:	4313      	orrs	r3, r2
 8002306:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002308:	e0fd      	b.n	8002506 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800230a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 8088 	beq.w	800242c <HAL_RCC_OscConfig+0x56c>
 800231c:	2301      	movs	r3, #1
 800231e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800232e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800233c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	461a      	mov	r2, r3
 8002344:	2301      	movs	r3, #1
 8002346:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7fe fa60 	bl	800080c <HAL_GetTick>
 800234c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002350:	e00a      	b.n	8002368 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002352:	f7fe fa5b 	bl	800080c <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d902      	bls.n	8002368 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	f000 bde2 	b.w	8002f2c <HAL_RCC_OscConfig+0x106c>
 8002368:	2302      	movs	r3, #2
 800236a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800237a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	095b      	lsrs	r3, r3, #5
 8002386:	b2db      	uxtb	r3, r3
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b01      	cmp	r3, #1
 8002390:	d102      	bne.n	8002398 <HAL_RCC_OscConfig+0x4d8>
 8002392:	4b45      	ldr	r3, [pc, #276]	; (80024a8 <HAL_RCC_OscConfig+0x5e8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	e013      	b.n	80023c0 <HAL_RCC_OscConfig+0x500>
 8002398:	2302      	movs	r3, #2
 800239a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80023a2:	fa93 f3a3 	rbit	r3, r3
 80023a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80023aa:	2302      	movs	r3, #2
 80023ac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80023b0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80023bc:	4b3a      	ldr	r3, [pc, #232]	; (80024a8 <HAL_RCC_OscConfig+0x5e8>)
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	2202      	movs	r2, #2
 80023c2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80023c6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80023ca:	fa92 f2a2 	rbit	r2, r2
 80023ce:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80023d2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80023d6:	fab2 f282 	clz	r2, r2
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	f042 0220 	orr.w	r2, r2, #32
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	f002 021f 	and.w	r2, r2, #31
 80023e6:	2101      	movs	r1, #1
 80023e8:	fa01 f202 	lsl.w	r2, r1, r2
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0af      	beq.n	8002352 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f2:	4b2d      	ldr	r3, [pc, #180]	; (80024a8 <HAL_RCC_OscConfig+0x5e8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	21f8      	movs	r1, #248	; 0xf8
 8002408:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002410:	fa91 f1a1 	rbit	r1, r1
 8002414:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002418:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800241c:	fab1 f181 	clz	r1, r1
 8002420:	b2c9      	uxtb	r1, r1
 8002422:	408b      	lsls	r3, r1
 8002424:	4920      	ldr	r1, [pc, #128]	; (80024a8 <HAL_RCC_OscConfig+0x5e8>)
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]
 800242a:	e06c      	b.n	8002506 <HAL_RCC_OscConfig+0x646>
 800242c:	2301      	movs	r3, #1
 800242e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002436:	fa93 f3a3 	rbit	r3, r3
 800243a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800243e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800244c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	461a      	mov	r2, r3
 8002454:	2300      	movs	r3, #0
 8002456:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7fe f9d8 	bl	800080c <HAL_GetTick>
 800245c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002460:	e00a      	b.n	8002478 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002462:	f7fe f9d3 	bl	800080c <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d902      	bls.n	8002478 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	f000 bd5a 	b.w	8002f2c <HAL_RCC_OscConfig+0x106c>
 8002478:	2302      	movs	r3, #2
 800247a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800248a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248e:	fab3 f383 	clz	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	095b      	lsrs	r3, r3, #5
 8002496:	b2db      	uxtb	r3, r3
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d104      	bne.n	80024ac <HAL_RCC_OscConfig+0x5ec>
 80024a2:	4b01      	ldr	r3, [pc, #4]	; (80024a8 <HAL_RCC_OscConfig+0x5e8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	e015      	b.n	80024d4 <HAL_RCC_OscConfig+0x614>
 80024a8:	40021000 	.word	0x40021000
 80024ac:	2302      	movs	r3, #2
 80024ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80024b6:	fa93 f3a3 	rbit	r3, r3
 80024ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80024be:	2302      	movs	r3, #2
 80024c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80024c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80024d0:	4bc8      	ldr	r3, [pc, #800]	; (80027f4 <HAL_RCC_OscConfig+0x934>)
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	2202      	movs	r2, #2
 80024d6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80024da:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80024de:	fa92 f2a2 	rbit	r2, r2
 80024e2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80024e6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80024ea:	fab2 f282 	clz	r2, r2
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	f042 0220 	orr.w	r2, r2, #32
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	f002 021f 	and.w	r2, r2, #31
 80024fa:	2101      	movs	r1, #1
 80024fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002500:	4013      	ands	r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1ad      	bne.n	8002462 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 8110 	beq.w	800273c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800251c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002520:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d079      	beq.n	8002620 <HAL_RCC_OscConfig+0x760>
 800252c:	2301      	movs	r3, #1
 800252e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002536:	fa93 f3a3 	rbit	r3, r3
 800253a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800253e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002542:	fab3 f383 	clz	r3, r3
 8002546:	b2db      	uxtb	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	4bab      	ldr	r3, [pc, #684]	; (80027f8 <HAL_RCC_OscConfig+0x938>)
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	461a      	mov	r2, r3
 8002552:	2301      	movs	r3, #1
 8002554:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002556:	f7fe f959 	bl	800080c <HAL_GetTick>
 800255a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255e:	e00a      	b.n	8002576 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002560:	f7fe f954 	bl	800080c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d902      	bls.n	8002576 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	f000 bcdb 	b.w	8002f2c <HAL_RCC_OscConfig+0x106c>
 8002576:	2302      	movs	r3, #2
 8002578:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002580:	fa93 f3a3 	rbit	r3, r3
 8002584:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002590:	2202      	movs	r2, #2
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002598:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	fa93 f2a3 	rbit	r2, r3
 80025a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025b4:	2202      	movs	r2, #2
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	fa93 f2a3 	rbit	r2, r3
 80025c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d0:	4b88      	ldr	r3, [pc, #544]	; (80027f4 <HAL_RCC_OscConfig+0x934>)
 80025d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025dc:	2102      	movs	r1, #2
 80025de:	6019      	str	r1, [r3, #0]
 80025e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	fa93 f1a3 	rbit	r1, r3
 80025ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025f6:	6019      	str	r1, [r3, #0]
  return result;
 80025f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800260c:	b2db      	uxtb	r3, r3
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	2101      	movs	r1, #1
 8002614:	fa01 f303 	lsl.w	r3, r1, r3
 8002618:	4013      	ands	r3, r2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0a0      	beq.n	8002560 <HAL_RCC_OscConfig+0x6a0>
 800261e:	e08d      	b.n	800273c <HAL_RCC_OscConfig+0x87c>
 8002620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002624:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002630:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	fa93 f2a3 	rbit	r2, r3
 800263a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002642:	601a      	str	r2, [r3, #0]
  return result;
 8002644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002648:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800264c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800264e:	fab3 f383 	clz	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	4b68      	ldr	r3, [pc, #416]	; (80027f8 <HAL_RCC_OscConfig+0x938>)
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	461a      	mov	r2, r3
 800265e:	2300      	movs	r3, #0
 8002660:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002662:	f7fe f8d3 	bl	800080c <HAL_GetTick>
 8002666:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266a:	e00a      	b.n	8002682 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800266c:	f7fe f8ce 	bl	800080c <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d902      	bls.n	8002682 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	f000 bc55 	b.w	8002f2c <HAL_RCC_OscConfig+0x106c>
 8002682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002686:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800268a:	2202      	movs	r2, #2
 800268c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002692:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	fa93 f2a3 	rbit	r2, r3
 800269c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80026ae:	2202      	movs	r2, #2
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	fa93 f2a3 	rbit	r2, r3
 80026c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80026d2:	2202      	movs	r2, #2
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	fa93 f2a3 	rbit	r2, r3
 80026e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80026ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ee:	4b41      	ldr	r3, [pc, #260]	; (80027f4 <HAL_RCC_OscConfig+0x934>)
 80026f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80026fa:	2102      	movs	r1, #2
 80026fc:	6019      	str	r1, [r3, #0]
 80026fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002702:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	fa93 f1a3 	rbit	r1, r3
 800270c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002710:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002714:	6019      	str	r1, [r3, #0]
  return result;
 8002716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	fab3 f383 	clz	r3, r3
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	2101      	movs	r1, #1
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	4013      	ands	r3, r2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d197      	bne.n	800266c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800273c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002740:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 81a1 	beq.w	8002a94 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002752:	2300      	movs	r3, #0
 8002754:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002758:	4b26      	ldr	r3, [pc, #152]	; (80027f4 <HAL_RCC_OscConfig+0x934>)
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d116      	bne.n	8002792 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002764:	4b23      	ldr	r3, [pc, #140]	; (80027f4 <HAL_RCC_OscConfig+0x934>)
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	4a22      	ldr	r2, [pc, #136]	; (80027f4 <HAL_RCC_OscConfig+0x934>)
 800276a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276e:	61d3      	str	r3, [r2, #28]
 8002770:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <HAL_RCC_OscConfig+0x934>)
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002786:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800278a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800278c:	2301      	movs	r3, #1
 800278e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002792:	4b1a      	ldr	r3, [pc, #104]	; (80027fc <HAL_RCC_OscConfig+0x93c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d11a      	bne.n	80027d4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800279e:	4b17      	ldr	r3, [pc, #92]	; (80027fc <HAL_RCC_OscConfig+0x93c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a16      	ldr	r2, [pc, #88]	; (80027fc <HAL_RCC_OscConfig+0x93c>)
 80027a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027aa:	f7fe f82f 	bl	800080c <HAL_GetTick>
 80027ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b2:	e009      	b.n	80027c8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b4:	f7fe f82a 	bl	800080c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b64      	cmp	r3, #100	; 0x64
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e3b1      	b.n	8002f2c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <HAL_RCC_OscConfig+0x93c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0ef      	beq.n	80027b4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d10d      	bne.n	8002800 <HAL_RCC_OscConfig+0x940>
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <HAL_RCC_OscConfig+0x934>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	4a02      	ldr	r2, [pc, #8]	; (80027f4 <HAL_RCC_OscConfig+0x934>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6213      	str	r3, [r2, #32]
 80027f0:	e03c      	b.n	800286c <HAL_RCC_OscConfig+0x9ac>
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000
 80027f8:	10908120 	.word	0x10908120
 80027fc:	40007000 	.word	0x40007000
 8002800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002804:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10c      	bne.n	800282a <HAL_RCC_OscConfig+0x96a>
 8002810:	4bc1      	ldr	r3, [pc, #772]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	4ac0      	ldr	r2, [pc, #768]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002816:	f023 0301 	bic.w	r3, r3, #1
 800281a:	6213      	str	r3, [r2, #32]
 800281c:	4bbe      	ldr	r3, [pc, #760]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	4abd      	ldr	r2, [pc, #756]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002822:	f023 0304 	bic.w	r3, r3, #4
 8002826:	6213      	str	r3, [r2, #32]
 8002828:	e020      	b.n	800286c <HAL_RCC_OscConfig+0x9ac>
 800282a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	2b05      	cmp	r3, #5
 8002838:	d10c      	bne.n	8002854 <HAL_RCC_OscConfig+0x994>
 800283a:	4bb7      	ldr	r3, [pc, #732]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	4ab6      	ldr	r2, [pc, #728]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002840:	f043 0304 	orr.w	r3, r3, #4
 8002844:	6213      	str	r3, [r2, #32]
 8002846:	4bb4      	ldr	r3, [pc, #720]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	4ab3      	ldr	r2, [pc, #716]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6213      	str	r3, [r2, #32]
 8002852:	e00b      	b.n	800286c <HAL_RCC_OscConfig+0x9ac>
 8002854:	4bb0      	ldr	r3, [pc, #704]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	4aaf      	ldr	r2, [pc, #700]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 800285a:	f023 0301 	bic.w	r3, r3, #1
 800285e:	6213      	str	r3, [r2, #32]
 8002860:	4bad      	ldr	r3, [pc, #692]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	4aac      	ldr	r2, [pc, #688]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002866:	f023 0304 	bic.w	r3, r3, #4
 800286a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800286c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002870:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8081 	beq.w	8002980 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287e:	f7fd ffc5 	bl	800080c <HAL_GetTick>
 8002882:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002886:	e00b      	b.n	80028a0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002888:	f7fd ffc0 	bl	800080c <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f241 3288 	movw	r2, #5000	; 0x1388
 8002898:	4293      	cmp	r3, r2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e345      	b.n	8002f2c <HAL_RCC_OscConfig+0x106c>
 80028a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80028a8:	2202      	movs	r2, #2
 80028aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	fa93 f2a3 	rbit	r2, r3
 80028ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80028cc:	2202      	movs	r2, #2
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	fa93 f2a3 	rbit	r2, r3
 80028de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028e6:	601a      	str	r2, [r3, #0]
  return result;
 80028e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ec:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028f0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	095b      	lsrs	r3, r3, #5
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	f043 0302 	orr.w	r3, r3, #2
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d102      	bne.n	800290c <HAL_RCC_OscConfig+0xa4c>
 8002906:	4b84      	ldr	r3, [pc, #528]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	e013      	b.n	8002934 <HAL_RCC_OscConfig+0xa74>
 800290c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002910:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002914:	2202      	movs	r2, #2
 8002916:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	fa93 f2a3 	rbit	r2, r3
 8002926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	4b79      	ldr	r3, [pc, #484]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002938:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800293c:	2102      	movs	r1, #2
 800293e:	6011      	str	r1, [r2, #0]
 8002940:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002944:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	fa92 f1a2 	rbit	r1, r2
 800294e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002952:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002956:	6011      	str	r1, [r2, #0]
  return result;
 8002958:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800295c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	fab2 f282 	clz	r2, r2
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	f002 021f 	and.w	r2, r2, #31
 8002972:	2101      	movs	r1, #1
 8002974:	fa01 f202 	lsl.w	r2, r1, r2
 8002978:	4013      	ands	r3, r2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d084      	beq.n	8002888 <HAL_RCC_OscConfig+0x9c8>
 800297e:	e07f      	b.n	8002a80 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002980:	f7fd ff44 	bl	800080c <HAL_GetTick>
 8002984:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002988:	e00b      	b.n	80029a2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800298a:	f7fd ff3f 	bl	800080c <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	; 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e2c4      	b.n	8002f2c <HAL_RCC_OscConfig+0x106c>
 80029a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80029aa:	2202      	movs	r2, #2
 80029ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	fa93 f2a3 	rbit	r2, r3
 80029bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80029ce:	2202      	movs	r2, #2
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	fa93 f2a3 	rbit	r2, r3
 80029e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80029e8:	601a      	str	r2, [r3, #0]
  return result;
 80029ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ee:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80029f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f4:	fab3 f383 	clz	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	f043 0302 	orr.w	r3, r3, #2
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d102      	bne.n	8002a0e <HAL_RCC_OscConfig+0xb4e>
 8002a08:	4b43      	ldr	r3, [pc, #268]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	e013      	b.n	8002a36 <HAL_RCC_OscConfig+0xb76>
 8002a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a12:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a16:	2202      	movs	r2, #2
 8002a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	fa93 f2a3 	rbit	r2, r3
 8002a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	4b39      	ldr	r3, [pc, #228]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a3a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002a3e:	2102      	movs	r1, #2
 8002a40:	6011      	str	r1, [r2, #0]
 8002a42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a46:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	fa92 f1a2 	rbit	r1, r2
 8002a50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a54:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a58:	6011      	str	r1, [r2, #0]
  return result;
 8002a5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a5e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	fab2 f282 	clz	r2, r2
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	f002 021f 	and.w	r2, r2, #31
 8002a74:	2101      	movs	r1, #1
 8002a76:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d184      	bne.n	800298a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a80:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d105      	bne.n	8002a94 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a88:	4b23      	ldr	r3, [pc, #140]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	4a22      	ldr	r2, [pc, #136]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a92:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 8242 	beq.w	8002f2a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aa6:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	f000 8213 	beq.w	8002eda <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	f040 8162 	bne.w	8002d8a <HAL_RCC_OscConfig+0xeca>
 8002ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aca:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002ace:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ad2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	fa93 f2a3 	rbit	r2, r3
 8002ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002aea:	601a      	str	r2, [r3, #0]
  return result;
 8002aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002af4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	461a      	mov	r2, r3
 8002b08:	2300      	movs	r3, #0
 8002b0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7fd fe7e 	bl	800080c <HAL_GetTick>
 8002b10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b14:	e00c      	b.n	8002b30 <HAL_RCC_OscConfig+0xc70>
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7fd fe76 	bl	800080c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e1fd      	b.n	8002f2c <HAL_RCC_OscConfig+0x106c>
 8002b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b34:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b42:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	fa93 f2a3 	rbit	r2, r3
 8002b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b50:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b54:	601a      	str	r2, [r3, #0]
  return result;
 8002b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b5e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b60:	fab3 f383 	clz	r3, r3
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d102      	bne.n	8002b7a <HAL_RCC_OscConfig+0xcba>
 8002b74:	4bb0      	ldr	r3, [pc, #704]	; (8002e38 <HAL_RCC_OscConfig+0xf78>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	e027      	b.n	8002bca <HAL_RCC_OscConfig+0xd0a>
 8002b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	fa93 f2a3 	rbit	r2, r3
 8002b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ba8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	fa93 f2a3 	rbit	r2, r3
 8002bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	4b9c      	ldr	r3, [pc, #624]	; (8002e38 <HAL_RCC_OscConfig+0xf78>)
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bce:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002bd2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bd6:	6011      	str	r1, [r2, #0]
 8002bd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bdc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	fa92 f1a2 	rbit	r1, r2
 8002be6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bea:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002bee:	6011      	str	r1, [r2, #0]
  return result;
 8002bf0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bf4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002bf8:	6812      	ldr	r2, [r2, #0]
 8002bfa:	fab2 f282 	clz	r2, r2
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	f042 0220 	orr.w	r2, r2, #32
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	f002 021f 	and.w	r2, r2, #31
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d182      	bne.n	8002b1c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c16:	4b88      	ldr	r3, [pc, #544]	; (8002e38 <HAL_RCC_OscConfig+0xf78>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	430b      	orrs	r3, r1
 8002c38:	497f      	ldr	r1, [pc, #508]	; (8002e38 <HAL_RCC_OscConfig+0xf78>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	604b      	str	r3, [r1, #4]
 8002c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c42:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002c46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c50:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	fa93 f2a3 	rbit	r2, r3
 8002c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c62:	601a      	str	r2, [r3, #0]
  return result;
 8002c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c68:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c6c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c6e:	fab3 f383 	clz	r3, r3
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	461a      	mov	r2, r3
 8002c80:	2301      	movs	r3, #1
 8002c82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7fd fdc2 	bl	800080c <HAL_GetTick>
 8002c88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c8c:	e009      	b.n	8002ca2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8e:	f7fd fdbd 	bl	800080c <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e144      	b.n	8002f2c <HAL_RCC_OscConfig+0x106c>
 8002ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002caa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	fa93 f2a3 	rbit	r2, r3
 8002cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002cc6:	601a      	str	r2, [r3, #0]
  return result;
 8002cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ccc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002cd0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	095b      	lsrs	r3, r3, #5
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d102      	bne.n	8002cec <HAL_RCC_OscConfig+0xe2c>
 8002ce6:	4b54      	ldr	r3, [pc, #336]	; (8002e38 <HAL_RCC_OscConfig+0xf78>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	e027      	b.n	8002d3c <HAL_RCC_OscConfig+0xe7c>
 8002cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002cf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	fa93 f2a3 	rbit	r2, r3
 8002d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d16:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002d1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d24:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	fa93 f2a3 	rbit	r2, r3
 8002d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d32:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	4b3f      	ldr	r3, [pc, #252]	; (8002e38 <HAL_RCC_OscConfig+0xf78>)
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d40:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002d44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d48:	6011      	str	r1, [r2, #0]
 8002d4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d4e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	fa92 f1a2 	rbit	r1, r2
 8002d58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d5c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d60:	6011      	str	r1, [r2, #0]
  return result;
 8002d62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d66:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	fab2 f282 	clz	r2, r2
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	f042 0220 	orr.w	r2, r2, #32
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	f002 021f 	and.w	r2, r2, #31
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d082      	beq.n	8002c8e <HAL_RCC_OscConfig+0xdce>
 8002d88:	e0cf      	b.n	8002f2a <HAL_RCC_OscConfig+0x106a>
 8002d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002d92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	fa93 f2a3 	rbit	r2, r3
 8002da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002daa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002dae:	601a      	str	r2, [r3, #0]
  return result;
 8002db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002db8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	461a      	mov	r2, r3
 8002dcc:	2300      	movs	r3, #0
 8002dce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7fd fd1c 	bl	800080c <HAL_GetTick>
 8002dd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd8:	e009      	b.n	8002dee <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dda:	f7fd fd17 	bl	800080c <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e09e      	b.n	8002f2c <HAL_RCC_OscConfig+0x106c>
 8002dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002df6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e00:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	fa93 f2a3 	rbit	r2, r3
 8002e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e12:	601a      	str	r2, [r3, #0]
  return result;
 8002e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e18:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e1e:	fab3 f383 	clz	r3, r3
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	095b      	lsrs	r3, r3, #5
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d104      	bne.n	8002e3c <HAL_RCC_OscConfig+0xf7c>
 8002e32:	4b01      	ldr	r3, [pc, #4]	; (8002e38 <HAL_RCC_OscConfig+0xf78>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	e029      	b.n	8002e8c <HAL_RCC_OscConfig+0xfcc>
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e40:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	fa93 f2a3 	rbit	r2, r3
 8002e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e66:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e74:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	fa93 f2a3 	rbit	r2, r3
 8002e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e82:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	4b2b      	ldr	r3, [pc, #172]	; (8002f38 <HAL_RCC_OscConfig+0x1078>)
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e90:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002e94:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e98:	6011      	str	r1, [r2, #0]
 8002e9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e9e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	fa92 f1a2 	rbit	r1, r2
 8002ea8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eac:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002eb0:	6011      	str	r1, [r2, #0]
  return result;
 8002eb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eb6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	fab2 f282 	clz	r2, r2
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	f042 0220 	orr.w	r2, r2, #32
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	f002 021f 	and.w	r2, r2, #31
 8002ecc:	2101      	movs	r1, #1
 8002ece:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d180      	bne.n	8002dda <HAL_RCC_OscConfig+0xf1a>
 8002ed8:	e027      	b.n	8002f2a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ede:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e01e      	b.n	8002f2c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002eee:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_RCC_OscConfig+0x1078>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ef6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002efa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d10b      	bne.n	8002f26 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002f0e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002f12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d001      	beq.n	8002f2a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000

08002f3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b09e      	sub	sp, #120	; 0x78
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e162      	b.n	800321a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b90      	ldr	r3, [pc, #576]	; (8003198 <HAL_RCC_ClockConfig+0x25c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d910      	bls.n	8002f84 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b8d      	ldr	r3, [pc, #564]	; (8003198 <HAL_RCC_ClockConfig+0x25c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 0207 	bic.w	r2, r3, #7
 8002f6a:	498b      	ldr	r1, [pc, #556]	; (8003198 <HAL_RCC_ClockConfig+0x25c>)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b89      	ldr	r3, [pc, #548]	; (8003198 <HAL_RCC_ClockConfig+0x25c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e14a      	b.n	800321a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f90:	4b82      	ldr	r3, [pc, #520]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	497f      	ldr	r1, [pc, #508]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80dc 	beq.w	8003168 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d13c      	bne.n	8003032 <HAL_RCC_ClockConfig+0xf6>
 8002fb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fbc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fc0:	fa93 f3a3 	rbit	r3, r3
 8002fc4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc8:	fab3 f383 	clz	r3, r3
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d102      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xa6>
 8002fdc:	4b6f      	ldr	r3, [pc, #444]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	e00f      	b.n	8003002 <HAL_RCC_ClockConfig+0xc6>
 8002fe2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fe6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fea:	fa93 f3a3 	rbit	r3, r3
 8002fee:	667b      	str	r3, [r7, #100]	; 0x64
 8002ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ff4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ffe:	4b67      	ldr	r3, [pc, #412]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003006:	65ba      	str	r2, [r7, #88]	; 0x58
 8003008:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800300a:	fa92 f2a2 	rbit	r2, r2
 800300e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003010:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003012:	fab2 f282 	clz	r2, r2
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	f042 0220 	orr.w	r2, r2, #32
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	f002 021f 	and.w	r2, r2, #31
 8003022:	2101      	movs	r1, #1
 8003024:	fa01 f202 	lsl.w	r2, r1, r2
 8003028:	4013      	ands	r3, r2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d17b      	bne.n	8003126 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e0f3      	b.n	800321a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d13c      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x178>
 800303a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800303e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	b2db      	uxtb	r3, r3
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b01      	cmp	r3, #1
 800305c:	d102      	bne.n	8003064 <HAL_RCC_ClockConfig+0x128>
 800305e:	4b4f      	ldr	r3, [pc, #316]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	e00f      	b.n	8003084 <HAL_RCC_ClockConfig+0x148>
 8003064:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003068:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	647b      	str	r3, [r7, #68]	; 0x44
 8003072:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003076:	643b      	str	r3, [r7, #64]	; 0x40
 8003078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003080:	4b46      	ldr	r3, [pc, #280]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003088:	63ba      	str	r2, [r7, #56]	; 0x38
 800308a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800308c:	fa92 f2a2 	rbit	r2, r2
 8003090:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003094:	fab2 f282 	clz	r2, r2
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	f042 0220 	orr.w	r2, r2, #32
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	f002 021f 	and.w	r2, r2, #31
 80030a4:	2101      	movs	r1, #1
 80030a6:	fa01 f202 	lsl.w	r2, r1, r2
 80030aa:	4013      	ands	r3, r2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d13a      	bne.n	8003126 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0b2      	b.n	800321a <HAL_RCC_ClockConfig+0x2de>
 80030b4:	2302      	movs	r3, #2
 80030b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ba:	fa93 f3a3 	rbit	r3, r3
 80030be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80030c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c2:	fab3 f383 	clz	r3, r3
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	095b      	lsrs	r3, r3, #5
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d102      	bne.n	80030dc <HAL_RCC_ClockConfig+0x1a0>
 80030d6:	4b31      	ldr	r3, [pc, #196]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	e00d      	b.n	80030f8 <HAL_RCC_ClockConfig+0x1bc>
 80030dc:	2302      	movs	r3, #2
 80030de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e2:	fa93 f3a3 	rbit	r3, r3
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
 80030e8:	2302      	movs	r3, #2
 80030ea:	623b      	str	r3, [r7, #32]
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	61fb      	str	r3, [r7, #28]
 80030f4:	4b29      	ldr	r3, [pc, #164]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	2202      	movs	r2, #2
 80030fa:	61ba      	str	r2, [r7, #24]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	fa92 f2a2 	rbit	r2, r2
 8003102:	617a      	str	r2, [r7, #20]
  return result;
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	fab2 f282 	clz	r2, r2
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	f042 0220 	orr.w	r2, r2, #32
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	f002 021f 	and.w	r2, r2, #31
 8003116:	2101      	movs	r1, #1
 8003118:	fa01 f202 	lsl.w	r2, r1, r2
 800311c:	4013      	ands	r3, r2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e079      	b.n	800321a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003126:	4b1d      	ldr	r3, [pc, #116]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f023 0203 	bic.w	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	491a      	ldr	r1, [pc, #104]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8003134:	4313      	orrs	r3, r2
 8003136:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003138:	f7fd fb68 	bl	800080c <HAL_GetTick>
 800313c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313e:	e00a      	b.n	8003156 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003140:	f7fd fb64 	bl	800080c <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	; 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e061      	b.n	800321a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003156:	4b11      	ldr	r3, [pc, #68]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f003 020c 	and.w	r2, r3, #12
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	429a      	cmp	r2, r3
 8003166:	d1eb      	bne.n	8003140 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003168:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_RCC_ClockConfig+0x25c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d214      	bcs.n	80031a0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003176:	4b08      	ldr	r3, [pc, #32]	; (8003198 <HAL_RCC_ClockConfig+0x25c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 0207 	bic.w	r2, r3, #7
 800317e:	4906      	ldr	r1, [pc, #24]	; (8003198 <HAL_RCC_ClockConfig+0x25c>)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003186:	4b04      	ldr	r3, [pc, #16]	; (8003198 <HAL_RCC_ClockConfig+0x25c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e040      	b.n	800321a <HAL_RCC_ClockConfig+0x2de>
 8003198:	40022000 	.word	0x40022000
 800319c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031ac:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <HAL_RCC_ClockConfig+0x2e8>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	491a      	ldr	r1, [pc, #104]	; (8003224 <HAL_RCC_ClockConfig+0x2e8>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d009      	beq.n	80031de <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ca:	4b16      	ldr	r3, [pc, #88]	; (8003224 <HAL_RCC_ClockConfig+0x2e8>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	4912      	ldr	r1, [pc, #72]	; (8003224 <HAL_RCC_ClockConfig+0x2e8>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80031de:	f000 f829 	bl	8003234 <HAL_RCC_GetSysClockFreq>
 80031e2:	4601      	mov	r1, r0
 80031e4:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <HAL_RCC_ClockConfig+0x2e8>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031ec:	22f0      	movs	r2, #240	; 0xf0
 80031ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	fa92 f2a2 	rbit	r2, r2
 80031f6:	60fa      	str	r2, [r7, #12]
  return result;
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	fab2 f282 	clz	r2, r2
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	40d3      	lsrs	r3, r2
 8003202:	4a09      	ldr	r2, [pc, #36]	; (8003228 <HAL_RCC_ClockConfig+0x2ec>)
 8003204:	5cd3      	ldrb	r3, [r2, r3]
 8003206:	fa21 f303 	lsr.w	r3, r1, r3
 800320a:	4a08      	ldr	r2, [pc, #32]	; (800322c <HAL_RCC_ClockConfig+0x2f0>)
 800320c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800320e:	4b08      	ldr	r3, [pc, #32]	; (8003230 <HAL_RCC_ClockConfig+0x2f4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7fd fab6 	bl	8000784 <HAL_InitTick>
  
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3778      	adds	r7, #120	; 0x78
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40021000 	.word	0x40021000
 8003228:	080035e4 	.word	0x080035e4
 800322c:	20000000 	.word	0x20000000
 8003230:	20000004 	.word	0x20000004

08003234 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003234:	b480      	push	{r7}
 8003236:	b08b      	sub	sp, #44	; 0x2c
 8003238:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	2300      	movs	r3, #0
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	2300      	movs	r3, #0
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800324e:	4b29      	ldr	r3, [pc, #164]	; (80032f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b04      	cmp	r3, #4
 800325c:	d002      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x30>
 800325e:	2b08      	cmp	r3, #8
 8003260:	d003      	beq.n	800326a <HAL_RCC_GetSysClockFreq+0x36>
 8003262:	e03c      	b.n	80032de <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003264:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003266:	623b      	str	r3, [r7, #32]
      break;
 8003268:	e03c      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003270:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003274:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	fa92 f2a2 	rbit	r2, r2
 800327c:	607a      	str	r2, [r7, #4]
  return result;
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	fab2 f282 	clz	r2, r2
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	40d3      	lsrs	r3, r2
 8003288:	4a1c      	ldr	r2, [pc, #112]	; (80032fc <HAL_RCC_GetSysClockFreq+0xc8>)
 800328a:	5cd3      	ldrb	r3, [r2, r3]
 800328c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800328e:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	220f      	movs	r2, #15
 8003298:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	fa92 f2a2 	rbit	r2, r2
 80032a0:	60fa      	str	r2, [r7, #12]
  return result;
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	fab2 f282 	clz	r2, r2
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	40d3      	lsrs	r3, r2
 80032ac:	4a14      	ldr	r2, [pc, #80]	; (8003300 <HAL_RCC_GetSysClockFreq+0xcc>)
 80032ae:	5cd3      	ldrb	r3, [r2, r3]
 80032b0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032bc:	4a0e      	ldr	r2, [pc, #56]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	fb02 f303 	mul.w	r3, r2, r3
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
 80032cc:	e004      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	4a0c      	ldr	r2, [pc, #48]	; (8003304 <HAL_RCC_GetSysClockFreq+0xd0>)
 80032d2:	fb02 f303 	mul.w	r3, r2, r3
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	623b      	str	r3, [r7, #32]
      break;
 80032dc:	e002      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80032e0:	623b      	str	r3, [r7, #32]
      break;
 80032e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032e4:	6a3b      	ldr	r3, [r7, #32]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	372c      	adds	r7, #44	; 0x2c
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40021000 	.word	0x40021000
 80032f8:	007a1200 	.word	0x007a1200
 80032fc:	080035f4 	.word	0x080035f4
 8003300:	08003604 	.word	0x08003604
 8003304:	003d0900 	.word	0x003d0900

08003308 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b092      	sub	sp, #72	; 0x48
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003318:	2300      	movs	r3, #0
 800331a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 80cd 	beq.w	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800332c:	4b8e      	ldr	r3, [pc, #568]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10e      	bne.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003338:	4b8b      	ldr	r3, [pc, #556]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	4a8a      	ldr	r2, [pc, #552]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003342:	61d3      	str	r3, [r2, #28]
 8003344:	4b88      	ldr	r3, [pc, #544]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003350:	2301      	movs	r3, #1
 8003352:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003356:	4b85      	ldr	r3, [pc, #532]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335e:	2b00      	cmp	r3, #0
 8003360:	d118      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003362:	4b82      	ldr	r3, [pc, #520]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a81      	ldr	r2, [pc, #516]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800336e:	f7fd fa4d 	bl	800080c <HAL_GetTick>
 8003372:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003374:	e008      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003376:	f7fd fa49 	bl	800080c <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b64      	cmp	r3, #100	; 0x64
 8003382:	d901      	bls.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e0ea      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003388:	4b78      	ldr	r3, [pc, #480]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0f0      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003394:	4b74      	ldr	r3, [pc, #464]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800339c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800339e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d07d      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d076      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033b2:	4b6d      	ldr	r3, [pc, #436]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033c0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c4:	fa93 f3a3 	rbit	r3, r3
 80033c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033cc:	fab3 f383 	clz	r3, r3
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	461a      	mov	r2, r3
 80033d4:	4b66      	ldr	r3, [pc, #408]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033d6:	4413      	add	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	461a      	mov	r2, r3
 80033dc:	2301      	movs	r3, #1
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e8:	fa93 f3a3 	rbit	r3, r3
 80033ec:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80033ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033f0:	fab3 f383 	clz	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	461a      	mov	r2, r3
 80033f8:	4b5d      	ldr	r3, [pc, #372]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	461a      	mov	r2, r3
 8003400:	2300      	movs	r3, #0
 8003402:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003404:	4a58      	ldr	r2, [pc, #352]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003408:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800340a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d045      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003414:	f7fd f9fa 	bl	800080c <HAL_GetTick>
 8003418:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341a:	e00a      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800341c:	f7fd f9f6 	bl	800080c <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	f241 3288 	movw	r2, #5000	; 0x1388
 800342a:	4293      	cmp	r3, r2
 800342c:	d901      	bls.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e095      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003432:	2302      	movs	r3, #2
 8003434:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	fa93 f3a3 	rbit	r3, r3
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
 800343e:	2302      	movs	r3, #2
 8003440:	623b      	str	r3, [r7, #32]
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	fa93 f3a3 	rbit	r3, r3
 8003448:	61fb      	str	r3, [r7, #28]
  return result;
 800344a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344c:	fab3 f383 	clz	r3, r3
 8003450:	b2db      	uxtb	r3, r3
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	b2db      	uxtb	r3, r3
 8003456:	f043 0302 	orr.w	r3, r3, #2
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d102      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003460:	4b41      	ldr	r3, [pc, #260]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	e007      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003466:	2302      	movs	r3, #2
 8003468:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	fa93 f3a3 	rbit	r3, r3
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	4b3d      	ldr	r3, [pc, #244]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	2202      	movs	r2, #2
 8003478:	613a      	str	r2, [r7, #16]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	fa92 f2a2 	rbit	r2, r2
 8003480:	60fa      	str	r2, [r7, #12]
  return result;
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	fab2 f282 	clz	r2, r2
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	f002 021f 	and.w	r2, r2, #31
 8003494:	2101      	movs	r1, #1
 8003496:	fa01 f202 	lsl.w	r2, r1, r2
 800349a:	4013      	ands	r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0bd      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80034a0:	4b31      	ldr	r3, [pc, #196]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	492e      	ldr	r1, [pc, #184]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d105      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ba:	4b2b      	ldr	r3, [pc, #172]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	4a2a      	ldr	r2, [pc, #168]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d008      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034d2:	4b25      	ldr	r3, [pc, #148]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f023 0203 	bic.w	r2, r3, #3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	4922      	ldr	r1, [pc, #136]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034f0:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	f023 0210 	bic.w	r2, r3, #16
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	491a      	ldr	r1, [pc, #104]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800350e:	4b16      	ldr	r3, [pc, #88]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	4913      	ldr	r1, [pc, #76]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351c:	4313      	orrs	r3, r2
 800351e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d008      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800352c:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	490b      	ldr	r1, [pc, #44]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353a:	4313      	orrs	r3, r2
 800353c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d008      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800354a:	4b07      	ldr	r3, [pc, #28]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	4904      	ldr	r1, [pc, #16]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003558:	4313      	orrs	r3, r2
 800355a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3748      	adds	r7, #72	; 0x48
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000
 800356c:	40007000 	.word	0x40007000
 8003570:	10908100 	.word	0x10908100

08003574 <__libc_init_array>:
 8003574:	b570      	push	{r4, r5, r6, lr}
 8003576:	4d0d      	ldr	r5, [pc, #52]	; (80035ac <__libc_init_array+0x38>)
 8003578:	4c0d      	ldr	r4, [pc, #52]	; (80035b0 <__libc_init_array+0x3c>)
 800357a:	1b64      	subs	r4, r4, r5
 800357c:	10a4      	asrs	r4, r4, #2
 800357e:	2600      	movs	r6, #0
 8003580:	42a6      	cmp	r6, r4
 8003582:	d109      	bne.n	8003598 <__libc_init_array+0x24>
 8003584:	4d0b      	ldr	r5, [pc, #44]	; (80035b4 <__libc_init_array+0x40>)
 8003586:	4c0c      	ldr	r4, [pc, #48]	; (80035b8 <__libc_init_array+0x44>)
 8003588:	f000 f820 	bl	80035cc <_init>
 800358c:	1b64      	subs	r4, r4, r5
 800358e:	10a4      	asrs	r4, r4, #2
 8003590:	2600      	movs	r6, #0
 8003592:	42a6      	cmp	r6, r4
 8003594:	d105      	bne.n	80035a2 <__libc_init_array+0x2e>
 8003596:	bd70      	pop	{r4, r5, r6, pc}
 8003598:	f855 3b04 	ldr.w	r3, [r5], #4
 800359c:	4798      	blx	r3
 800359e:	3601      	adds	r6, #1
 80035a0:	e7ee      	b.n	8003580 <__libc_init_array+0xc>
 80035a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80035a6:	4798      	blx	r3
 80035a8:	3601      	adds	r6, #1
 80035aa:	e7f2      	b.n	8003592 <__libc_init_array+0x1e>
 80035ac:	08003614 	.word	0x08003614
 80035b0:	08003614 	.word	0x08003614
 80035b4:	08003614 	.word	0x08003614
 80035b8:	08003618 	.word	0x08003618

080035bc <memset>:
 80035bc:	4402      	add	r2, r0
 80035be:	4603      	mov	r3, r0
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d100      	bne.n	80035c6 <memset+0xa>
 80035c4:	4770      	bx	lr
 80035c6:	f803 1b01 	strb.w	r1, [r3], #1
 80035ca:	e7f9      	b.n	80035c0 <memset+0x4>

080035cc <_init>:
 80035cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ce:	bf00      	nop
 80035d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035d2:	bc08      	pop	{r3}
 80035d4:	469e      	mov	lr, r3
 80035d6:	4770      	bx	lr

080035d8 <_fini>:
 80035d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035da:	bf00      	nop
 80035dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035de:	bc08      	pop	{r3}
 80035e0:	469e      	mov	lr, r3
 80035e2:	4770      	bx	lr
